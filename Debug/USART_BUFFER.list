
USART_BUFFER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014e0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001610  08001610  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001610  08001610  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08001610  08001610  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001610  08001610  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001610  08001610  00011610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001614  08001614  00011614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08001618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bec  20000020  08001638  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c0c  08001638  00020c0c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c39  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000093c  00000000  00000000  00021c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00001488  00000000  00000000  000225be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002e0  00000000  00000000  00023a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000258  00000000  00000000  00023d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001381  00000000  00000000  00023f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001bb3  00000000  00000000  00025301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000515d  00000000  00000000  00026eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0002c011  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000b54  00000000  00000000  0002c064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	080015f8 	.word	0x080015f8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	080015f8 	.word	0x080015f8

08000170 <__aeabi_fmul>:
 8000170:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000174:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000178:	bf1e      	ittt	ne
 800017a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800017e:	ea92 0f0c 	teqne	r2, ip
 8000182:	ea93 0f0c 	teqne	r3, ip
 8000186:	d06f      	beq.n	8000268 <__aeabi_fmul+0xf8>
 8000188:	441a      	add	r2, r3
 800018a:	ea80 0c01 	eor.w	ip, r0, r1
 800018e:	0240      	lsls	r0, r0, #9
 8000190:	bf18      	it	ne
 8000192:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000196:	d01e      	beq.n	80001d6 <__aeabi_fmul+0x66>
 8000198:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800019c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001a0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001a4:	fba0 3101 	umull	r3, r1, r0, r1
 80001a8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80001ac:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001b0:	bf3e      	ittt	cc
 80001b2:	0049      	lslcc	r1, r1, #1
 80001b4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001b8:	005b      	lslcc	r3, r3, #1
 80001ba:	ea40 0001 	orr.w	r0, r0, r1
 80001be:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001c2:	2afd      	cmp	r2, #253	; 0xfd
 80001c4:	d81d      	bhi.n	8000202 <__aeabi_fmul+0x92>
 80001c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ce:	bf08      	it	eq
 80001d0:	f020 0001 	biceq.w	r0, r0, #1
 80001d4:	4770      	bx	lr
 80001d6:	f090 0f00 	teq	r0, #0
 80001da:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001de:	bf08      	it	eq
 80001e0:	0249      	lsleq	r1, r1, #9
 80001e2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001e6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ea:	3a7f      	subs	r2, #127	; 0x7f
 80001ec:	bfc2      	ittt	gt
 80001ee:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001f2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001f6:	4770      	bxgt	lr
 80001f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001fc:	f04f 0300 	mov.w	r3, #0
 8000200:	3a01      	subs	r2, #1
 8000202:	dc5d      	bgt.n	80002c0 <__aeabi_fmul+0x150>
 8000204:	f112 0f19 	cmn.w	r2, #25
 8000208:	bfdc      	itt	le
 800020a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800020e:	4770      	bxle	lr
 8000210:	f1c2 0200 	rsb	r2, r2, #0
 8000214:	0041      	lsls	r1, r0, #1
 8000216:	fa21 f102 	lsr.w	r1, r1, r2
 800021a:	f1c2 0220 	rsb	r2, r2, #32
 800021e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000222:	ea5f 0031 	movs.w	r0, r1, rrx
 8000226:	f140 0000 	adc.w	r0, r0, #0
 800022a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800022e:	bf08      	it	eq
 8000230:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000234:	4770      	bx	lr
 8000236:	f092 0f00 	teq	r2, #0
 800023a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800023e:	bf02      	ittt	eq
 8000240:	0040      	lsleq	r0, r0, #1
 8000242:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000246:	3a01      	subeq	r2, #1
 8000248:	d0f9      	beq.n	800023e <__aeabi_fmul+0xce>
 800024a:	ea40 000c 	orr.w	r0, r0, ip
 800024e:	f093 0f00 	teq	r3, #0
 8000252:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000256:	bf02      	ittt	eq
 8000258:	0049      	lsleq	r1, r1, #1
 800025a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800025e:	3b01      	subeq	r3, #1
 8000260:	d0f9      	beq.n	8000256 <__aeabi_fmul+0xe6>
 8000262:	ea41 010c 	orr.w	r1, r1, ip
 8000266:	e78f      	b.n	8000188 <__aeabi_fmul+0x18>
 8000268:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800026c:	ea92 0f0c 	teq	r2, ip
 8000270:	bf18      	it	ne
 8000272:	ea93 0f0c 	teqne	r3, ip
 8000276:	d00a      	beq.n	800028e <__aeabi_fmul+0x11e>
 8000278:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800027c:	bf18      	it	ne
 800027e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000282:	d1d8      	bne.n	8000236 <__aeabi_fmul+0xc6>
 8000284:	ea80 0001 	eor.w	r0, r0, r1
 8000288:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f090 0f00 	teq	r0, #0
 8000292:	bf17      	itett	ne
 8000294:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000298:	4608      	moveq	r0, r1
 800029a:	f091 0f00 	teqne	r1, #0
 800029e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80002a2:	d014      	beq.n	80002ce <__aeabi_fmul+0x15e>
 80002a4:	ea92 0f0c 	teq	r2, ip
 80002a8:	d101      	bne.n	80002ae <__aeabi_fmul+0x13e>
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	d10f      	bne.n	80002ce <__aeabi_fmul+0x15e>
 80002ae:	ea93 0f0c 	teq	r3, ip
 80002b2:	d103      	bne.n	80002bc <__aeabi_fmul+0x14c>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	bf18      	it	ne
 80002b8:	4608      	movne	r0, r1
 80002ba:	d108      	bne.n	80002ce <__aeabi_fmul+0x15e>
 80002bc:	ea80 0001 	eor.w	r0, r0, r1
 80002c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002cc:	4770      	bx	lr
 80002ce:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002d2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002d6:	4770      	bx	lr

080002d8 <__aeabi_frsub>:
 80002d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002dc:	e002      	b.n	80002e4 <__addsf3>
 80002de:	bf00      	nop

080002e0 <__aeabi_fsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002e4 <__addsf3>:
 80002e4:	0042      	lsls	r2, r0, #1
 80002e6:	bf1f      	itttt	ne
 80002e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002ec:	ea92 0f03 	teqne	r2, r3
 80002f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002f8:	d06a      	beq.n	80003d0 <__addsf3+0xec>
 80002fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000302:	bfc1      	itttt	gt
 8000304:	18d2      	addgt	r2, r2, r3
 8000306:	4041      	eorgt	r1, r0
 8000308:	4048      	eorgt	r0, r1
 800030a:	4041      	eorgt	r1, r0
 800030c:	bfb8      	it	lt
 800030e:	425b      	neglt	r3, r3
 8000310:	2b19      	cmp	r3, #25
 8000312:	bf88      	it	hi
 8000314:	4770      	bxhi	lr
 8000316:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800031a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800031e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000322:	bf18      	it	ne
 8000324:	4240      	negne	r0, r0
 8000326:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800032a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800032e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000332:	bf18      	it	ne
 8000334:	4249      	negne	r1, r1
 8000336:	ea92 0f03 	teq	r2, r3
 800033a:	d03f      	beq.n	80003bc <__addsf3+0xd8>
 800033c:	f1a2 0201 	sub.w	r2, r2, #1
 8000340:	fa41 fc03 	asr.w	ip, r1, r3
 8000344:	eb10 000c 	adds.w	r0, r0, ip
 8000348:	f1c3 0320 	rsb	r3, r3, #32
 800034c:	fa01 f103 	lsl.w	r1, r1, r3
 8000350:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000354:	d502      	bpl.n	800035c <__addsf3+0x78>
 8000356:	4249      	negs	r1, r1
 8000358:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800035c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000360:	d313      	bcc.n	800038a <__addsf3+0xa6>
 8000362:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000366:	d306      	bcc.n	8000376 <__addsf3+0x92>
 8000368:	0840      	lsrs	r0, r0, #1
 800036a:	ea4f 0131 	mov.w	r1, r1, rrx
 800036e:	f102 0201 	add.w	r2, r2, #1
 8000372:	2afe      	cmp	r2, #254	; 0xfe
 8000374:	d251      	bcs.n	800041a <__addsf3+0x136>
 8000376:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800037a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800037e:	bf08      	it	eq
 8000380:	f020 0001 	biceq.w	r0, r0, #1
 8000384:	ea40 0003 	orr.w	r0, r0, r3
 8000388:	4770      	bx	lr
 800038a:	0049      	lsls	r1, r1, #1
 800038c:	eb40 0000 	adc.w	r0, r0, r0
 8000390:	3a01      	subs	r2, #1
 8000392:	bf28      	it	cs
 8000394:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000398:	d2ed      	bcs.n	8000376 <__addsf3+0x92>
 800039a:	fab0 fc80 	clz	ip, r0
 800039e:	f1ac 0c08 	sub.w	ip, ip, #8
 80003a2:	ebb2 020c 	subs.w	r2, r2, ip
 80003a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80003aa:	bfaa      	itet	ge
 80003ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003b0:	4252      	neglt	r2, r2
 80003b2:	4318      	orrge	r0, r3
 80003b4:	bfbc      	itt	lt
 80003b6:	40d0      	lsrlt	r0, r2
 80003b8:	4318      	orrlt	r0, r3
 80003ba:	4770      	bx	lr
 80003bc:	f092 0f00 	teq	r2, #0
 80003c0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003c4:	bf06      	itte	eq
 80003c6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003ca:	3201      	addeq	r2, #1
 80003cc:	3b01      	subne	r3, #1
 80003ce:	e7b5      	b.n	800033c <__addsf3+0x58>
 80003d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003d8:	bf18      	it	ne
 80003da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003de:	d021      	beq.n	8000424 <__addsf3+0x140>
 80003e0:	ea92 0f03 	teq	r2, r3
 80003e4:	d004      	beq.n	80003f0 <__addsf3+0x10c>
 80003e6:	f092 0f00 	teq	r2, #0
 80003ea:	bf08      	it	eq
 80003ec:	4608      	moveq	r0, r1
 80003ee:	4770      	bx	lr
 80003f0:	ea90 0f01 	teq	r0, r1
 80003f4:	bf1c      	itt	ne
 80003f6:	2000      	movne	r0, #0
 80003f8:	4770      	bxne	lr
 80003fa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003fe:	d104      	bne.n	800040a <__addsf3+0x126>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	bf28      	it	cs
 8000404:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000408:	4770      	bx	lr
 800040a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800040e:	bf3c      	itt	cc
 8000410:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000414:	4770      	bxcc	lr
 8000416:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800041a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800041e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000422:	4770      	bx	lr
 8000424:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000428:	bf16      	itet	ne
 800042a:	4608      	movne	r0, r1
 800042c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000430:	4601      	movne	r1, r0
 8000432:	0242      	lsls	r2, r0, #9
 8000434:	bf06      	itte	eq
 8000436:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800043a:	ea90 0f01 	teqeq	r0, r1
 800043e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000442:	4770      	bx	lr

08000444 <__aeabi_ui2f>:
 8000444:	f04f 0300 	mov.w	r3, #0
 8000448:	e004      	b.n	8000454 <__aeabi_i2f+0x8>
 800044a:	bf00      	nop

0800044c <__aeabi_i2f>:
 800044c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	ea5f 0c00 	movs.w	ip, r0
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000460:	4601      	mov	r1, r0
 8000462:	f04f 0000 	mov.w	r0, #0
 8000466:	e01c      	b.n	80004a2 <__aeabi_l2f+0x2a>

08000468 <__aeabi_ul2f>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	f04f 0300 	mov.w	r3, #0
 8000474:	e00a      	b.n	800048c <__aeabi_l2f+0x14>
 8000476:	bf00      	nop

08000478 <__aeabi_l2f>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000484:	d502      	bpl.n	800048c <__aeabi_l2f+0x14>
 8000486:	4240      	negs	r0, r0
 8000488:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048c:	ea5f 0c01 	movs.w	ip, r1
 8000490:	bf02      	ittt	eq
 8000492:	4684      	moveq	ip, r0
 8000494:	4601      	moveq	r1, r0
 8000496:	2000      	moveq	r0, #0
 8000498:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800049c:	bf08      	it	eq
 800049e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80004a2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80004a6:	fabc f28c 	clz	r2, ip
 80004aa:	3a08      	subs	r2, #8
 80004ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004b0:	db10      	blt.n	80004d4 <__aeabi_l2f+0x5c>
 80004b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b6:	4463      	add	r3, ip
 80004b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80004bc:	f1c2 0220 	rsb	r2, r2, #32
 80004c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c4:	fa20 f202 	lsr.w	r2, r0, r2
 80004c8:	eb43 0002 	adc.w	r0, r3, r2
 80004cc:	bf08      	it	eq
 80004ce:	f020 0001 	biceq.w	r0, r0, #1
 80004d2:	4770      	bx	lr
 80004d4:	f102 0220 	add.w	r2, r2, #32
 80004d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80004dc:	f1c2 0220 	rsb	r2, r2, #32
 80004e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004e4:	fa21 f202 	lsr.w	r2, r1, r2
 80004e8:	eb43 0002 	adc.w	r0, r3, r2
 80004ec:	bf08      	it	eq
 80004ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004f2:	4770      	bx	lr

080004f4 <__gesf2>:
 80004f4:	f04f 3cff 	mov.w	ip, #4294967295
 80004f8:	e006      	b.n	8000508 <__cmpsf2+0x4>
 80004fa:	bf00      	nop

080004fc <__lesf2>:
 80004fc:	f04f 0c01 	mov.w	ip, #1
 8000500:	e002      	b.n	8000508 <__cmpsf2+0x4>
 8000502:	bf00      	nop

08000504 <__cmpsf2>:
 8000504:	f04f 0c01 	mov.w	ip, #1
 8000508:	f84d cd04 	str.w	ip, [sp, #-4]!
 800050c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000510:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000514:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000518:	bf18      	it	ne
 800051a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800051e:	d011      	beq.n	8000544 <__cmpsf2+0x40>
 8000520:	b001      	add	sp, #4
 8000522:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000526:	bf18      	it	ne
 8000528:	ea90 0f01 	teqne	r0, r1
 800052c:	bf58      	it	pl
 800052e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000532:	bf88      	it	hi
 8000534:	17c8      	asrhi	r0, r1, #31
 8000536:	bf38      	it	cc
 8000538:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800053c:	bf18      	it	ne
 800053e:	f040 0001 	orrne.w	r0, r0, #1
 8000542:	4770      	bx	lr
 8000544:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000548:	d102      	bne.n	8000550 <__cmpsf2+0x4c>
 800054a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800054e:	d105      	bne.n	800055c <__cmpsf2+0x58>
 8000550:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000554:	d1e4      	bne.n	8000520 <__cmpsf2+0x1c>
 8000556:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800055a:	d0e1      	beq.n	8000520 <__cmpsf2+0x1c>
 800055c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <__aeabi_cfrcmple>:
 8000564:	4684      	mov	ip, r0
 8000566:	4608      	mov	r0, r1
 8000568:	4661      	mov	r1, ip
 800056a:	e7ff      	b.n	800056c <__aeabi_cfcmpeq>

0800056c <__aeabi_cfcmpeq>:
 800056c:	b50f      	push	{r0, r1, r2, r3, lr}
 800056e:	f7ff ffc9 	bl	8000504 <__cmpsf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	bf48      	it	mi
 8000576:	f110 0f00 	cmnmi.w	r0, #0
 800057a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800057c <__aeabi_fcmpeq>:
 800057c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000580:	f7ff fff4 	bl	800056c <__aeabi_cfcmpeq>
 8000584:	bf0c      	ite	eq
 8000586:	2001      	moveq	r0, #1
 8000588:	2000      	movne	r0, #0
 800058a:	f85d fb08 	ldr.w	pc, [sp], #8
 800058e:	bf00      	nop

08000590 <__aeabi_fcmplt>:
 8000590:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000594:	f7ff ffea 	bl	800056c <__aeabi_cfcmpeq>
 8000598:	bf34      	ite	cc
 800059a:	2001      	movcc	r0, #1
 800059c:	2000      	movcs	r0, #0
 800059e:	f85d fb08 	ldr.w	pc, [sp], #8
 80005a2:	bf00      	nop

080005a4 <__aeabi_fcmple>:
 80005a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a8:	f7ff ffe0 	bl	800056c <__aeabi_cfcmpeq>
 80005ac:	bf94      	ite	ls
 80005ae:	2001      	movls	r0, #1
 80005b0:	2000      	movhi	r0, #0
 80005b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005b6:	bf00      	nop

080005b8 <__aeabi_fcmpge>:
 80005b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005bc:	f7ff ffd2 	bl	8000564 <__aeabi_cfrcmple>
 80005c0:	bf94      	ite	ls
 80005c2:	2001      	movls	r0, #1
 80005c4:	2000      	movhi	r0, #0
 80005c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ca:	bf00      	nop

080005cc <__aeabi_fcmpgt>:
 80005cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d0:	f7ff ffc8 	bl	8000564 <__aeabi_cfrcmple>
 80005d4:	bf34      	ite	cc
 80005d6:	2001      	movcc	r0, #1
 80005d8:	2000      	movcs	r0, #0
 80005da:	f85d fb08 	ldr.w	pc, [sp], #8
 80005de:	bf00      	nop

080005e0 <__aeabi_f2uiz>:
 80005e0:	0042      	lsls	r2, r0, #1
 80005e2:	d20e      	bcs.n	8000602 <__aeabi_f2uiz+0x22>
 80005e4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80005e8:	d30b      	bcc.n	8000602 <__aeabi_f2uiz+0x22>
 80005ea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80005ee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80005f2:	d409      	bmi.n	8000608 <__aeabi_f2uiz+0x28>
 80005f4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80005f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005fc:	fa23 f002 	lsr.w	r0, r3, r2
 8000600:	4770      	bx	lr
 8000602:	f04f 0000 	mov.w	r0, #0
 8000606:	4770      	bx	lr
 8000608:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800060c:	d101      	bne.n	8000612 <__aeabi_f2uiz+0x32>
 800060e:	0242      	lsls	r2, r0, #9
 8000610:	d102      	bne.n	8000618 <__aeabi_f2uiz+0x38>
 8000612:	f04f 30ff 	mov.w	r0, #4294967295
 8000616:	4770      	bx	lr
 8000618:	f04f 0000 	mov.w	r0, #0
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <MGPIO_voidSetPinDirection>:
#include "../Inc/MCAL/DIO/DIO_interface.h"
#include "../Inc/MCAL/DIO/DIO_private.h"


void MGPIO_voidSetPinDirection(u8 copy_u8PORT , u8 copy_u8PIN  , u8 copy_u8Mode)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
 800062a:	460b      	mov	r3, r1
 800062c:	71bb      	strb	r3, [r7, #6]
 800062e:	4613      	mov	r3, r2
 8000630:	717b      	strb	r3, [r7, #5]

	if(copy_u8PORT<3 && copy_u8PIN<16)
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	2b02      	cmp	r3, #2
 8000636:	f200 80c0 	bhi.w	80007ba <MGPIO_voidSetPinDirection+0x19a>
 800063a:	79bb      	ldrb	r3, [r7, #6]
 800063c:	2b0f      	cmp	r3, #15
 800063e:	f200 80bc 	bhi.w	80007ba <MGPIO_voidSetPinDirection+0x19a>
		{
			switch(copy_u8PORT)
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	2b02      	cmp	r3, #2
 8000646:	d07a      	beq.n	800073e <MGPIO_voidSetPinDirection+0x11e>
 8000648:	2b02      	cmp	r3, #2
 800064a:	f300 80b6 	bgt.w	80007ba <MGPIO_voidSetPinDirection+0x19a>
 800064e:	2b00      	cmp	r3, #0
 8000650:	d002      	beq.n	8000658 <MGPIO_voidSetPinDirection+0x38>
 8000652:	2b01      	cmp	r3, #1
 8000654:	d03a      	beq.n	80006cc <MGPIO_voidSetPinDirection+0xac>
				}else{	/*	Return Error */	}		break;
			}

		}else{	/*	Return Error		*/	}

	}
 8000656:	e0b0      	b.n	80007ba <MGPIO_voidSetPinDirection+0x19a>
				if(copy_u8PIN <8)
 8000658:	79bb      	ldrb	r3, [r7, #6]
 800065a:	2b07      	cmp	r3, #7
 800065c:	d817      	bhi.n	800068e <MGPIO_voidSetPinDirection+0x6e>
					GPIOA_CRL	&=~((0b1111)			<< (copy_u8PIN * 4));
 800065e:	4b59      	ldr	r3, [pc, #356]	; (80007c4 <MGPIO_voidSetPinDirection+0x1a4>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	79ba      	ldrb	r2, [r7, #6]
 8000664:	0092      	lsls	r2, r2, #2
 8000666:	210f      	movs	r1, #15
 8000668:	fa01 f202 	lsl.w	r2, r1, r2
 800066c:	43d2      	mvns	r2, r2
 800066e:	4611      	mov	r1, r2
 8000670:	4a54      	ldr	r2, [pc, #336]	; (80007c4 <MGPIO_voidSetPinDirection+0x1a4>)
 8000672:	400b      	ands	r3, r1
 8000674:	6013      	str	r3, [r2, #0]
					GPIOA_CRL	|=((copy_u8Mode)	<< (copy_u8PIN * 4));
 8000676:	4b53      	ldr	r3, [pc, #332]	; (80007c4 <MGPIO_voidSetPinDirection+0x1a4>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	7979      	ldrb	r1, [r7, #5]
 800067c:	79ba      	ldrb	r2, [r7, #6]
 800067e:	0092      	lsls	r2, r2, #2
 8000680:	fa01 f202 	lsl.w	r2, r1, r2
 8000684:	4611      	mov	r1, r2
 8000686:	4a4f      	ldr	r2, [pc, #316]	; (80007c4 <MGPIO_voidSetPinDirection+0x1a4>)
 8000688:	430b      	orrs	r3, r1
 800068a:	6013      	str	r3, [r2, #0]
				}else{	/*	Return Error */	}		break;
 800068c:	e090      	b.n	80007b0 <MGPIO_voidSetPinDirection+0x190>
				}else if(copy_u8PIN <16)
 800068e:	79bb      	ldrb	r3, [r7, #6]
 8000690:	2b0f      	cmp	r3, #15
 8000692:	f200 808d 	bhi.w	80007b0 <MGPIO_voidSetPinDirection+0x190>
					copy_u8PIN -= 8;
 8000696:	79bb      	ldrb	r3, [r7, #6]
 8000698:	3b08      	subs	r3, #8
 800069a:	71bb      	strb	r3, [r7, #6]
					GPIOA_CRH	&=~((0b1111)			<< (copy_u8PIN * 4));
 800069c:	4b4a      	ldr	r3, [pc, #296]	; (80007c8 <MGPIO_voidSetPinDirection+0x1a8>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	79ba      	ldrb	r2, [r7, #6]
 80006a2:	0092      	lsls	r2, r2, #2
 80006a4:	210f      	movs	r1, #15
 80006a6:	fa01 f202 	lsl.w	r2, r1, r2
 80006aa:	43d2      	mvns	r2, r2
 80006ac:	4611      	mov	r1, r2
 80006ae:	4a46      	ldr	r2, [pc, #280]	; (80007c8 <MGPIO_voidSetPinDirection+0x1a8>)
 80006b0:	400b      	ands	r3, r1
 80006b2:	6013      	str	r3, [r2, #0]
					GPIOA_CRH	|=((copy_u8Mode)	<< (copy_u8PIN * 4));
 80006b4:	4b44      	ldr	r3, [pc, #272]	; (80007c8 <MGPIO_voidSetPinDirection+0x1a8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	7979      	ldrb	r1, [r7, #5]
 80006ba:	79ba      	ldrb	r2, [r7, #6]
 80006bc:	0092      	lsls	r2, r2, #2
 80006be:	fa01 f202 	lsl.w	r2, r1, r2
 80006c2:	4611      	mov	r1, r2
 80006c4:	4a40      	ldr	r2, [pc, #256]	; (80007c8 <MGPIO_voidSetPinDirection+0x1a8>)
 80006c6:	430b      	orrs	r3, r1
 80006c8:	6013      	str	r3, [r2, #0]
				}else{	/*	Return Error */	}		break;
 80006ca:	e071      	b.n	80007b0 <MGPIO_voidSetPinDirection+0x190>
				if(copy_u8PIN <8)
 80006cc:	79bb      	ldrb	r3, [r7, #6]
 80006ce:	2b07      	cmp	r3, #7
 80006d0:	d817      	bhi.n	8000702 <MGPIO_voidSetPinDirection+0xe2>
					GPIOB_CRL	&=~((0b1111)			<< (copy_u8PIN * 4));
 80006d2:	4b3e      	ldr	r3, [pc, #248]	; (80007cc <MGPIO_voidSetPinDirection+0x1ac>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	79ba      	ldrb	r2, [r7, #6]
 80006d8:	0092      	lsls	r2, r2, #2
 80006da:	210f      	movs	r1, #15
 80006dc:	fa01 f202 	lsl.w	r2, r1, r2
 80006e0:	43d2      	mvns	r2, r2
 80006e2:	4611      	mov	r1, r2
 80006e4:	4a39      	ldr	r2, [pc, #228]	; (80007cc <MGPIO_voidSetPinDirection+0x1ac>)
 80006e6:	400b      	ands	r3, r1
 80006e8:	6013      	str	r3, [r2, #0]
					GPIOB_CRL	|=((copy_u8Mode)	<< (copy_u8PIN * 4));
 80006ea:	4b38      	ldr	r3, [pc, #224]	; (80007cc <MGPIO_voidSetPinDirection+0x1ac>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	7979      	ldrb	r1, [r7, #5]
 80006f0:	79ba      	ldrb	r2, [r7, #6]
 80006f2:	0092      	lsls	r2, r2, #2
 80006f4:	fa01 f202 	lsl.w	r2, r1, r2
 80006f8:	4611      	mov	r1, r2
 80006fa:	4a34      	ldr	r2, [pc, #208]	; (80007cc <MGPIO_voidSetPinDirection+0x1ac>)
 80006fc:	430b      	orrs	r3, r1
 80006fe:	6013      	str	r3, [r2, #0]
				}else{	/*	Return Error */	}		break;
 8000700:	e058      	b.n	80007b4 <MGPIO_voidSetPinDirection+0x194>
				}else if(copy_u8PIN <16)
 8000702:	79bb      	ldrb	r3, [r7, #6]
 8000704:	2b0f      	cmp	r3, #15
 8000706:	d855      	bhi.n	80007b4 <MGPIO_voidSetPinDirection+0x194>
					copy_u8PIN -= 8;
 8000708:	79bb      	ldrb	r3, [r7, #6]
 800070a:	3b08      	subs	r3, #8
 800070c:	71bb      	strb	r3, [r7, #6]
					GPIOB_CRH	&=~((0b1111)			<< (copy_u8PIN * 4));
 800070e:	4b30      	ldr	r3, [pc, #192]	; (80007d0 <MGPIO_voidSetPinDirection+0x1b0>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	79ba      	ldrb	r2, [r7, #6]
 8000714:	0092      	lsls	r2, r2, #2
 8000716:	210f      	movs	r1, #15
 8000718:	fa01 f202 	lsl.w	r2, r1, r2
 800071c:	43d2      	mvns	r2, r2
 800071e:	4611      	mov	r1, r2
 8000720:	4a2b      	ldr	r2, [pc, #172]	; (80007d0 <MGPIO_voidSetPinDirection+0x1b0>)
 8000722:	400b      	ands	r3, r1
 8000724:	6013      	str	r3, [r2, #0]
					GPIOB_CRH	|=((copy_u8Mode)	<< (copy_u8PIN * 4));
 8000726:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <MGPIO_voidSetPinDirection+0x1b0>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	7979      	ldrb	r1, [r7, #5]
 800072c:	79ba      	ldrb	r2, [r7, #6]
 800072e:	0092      	lsls	r2, r2, #2
 8000730:	fa01 f202 	lsl.w	r2, r1, r2
 8000734:	4611      	mov	r1, r2
 8000736:	4a26      	ldr	r2, [pc, #152]	; (80007d0 <MGPIO_voidSetPinDirection+0x1b0>)
 8000738:	430b      	orrs	r3, r1
 800073a:	6013      	str	r3, [r2, #0]
				}else{	/*	Return Error */	}		break;
 800073c:	e03a      	b.n	80007b4 <MGPIO_voidSetPinDirection+0x194>
				if(copy_u8PIN <8)
 800073e:	79bb      	ldrb	r3, [r7, #6]
 8000740:	2b07      	cmp	r3, #7
 8000742:	d817      	bhi.n	8000774 <MGPIO_voidSetPinDirection+0x154>
					GPIOC_CRL	&=~((0b1111)			<< (copy_u8PIN * 4));
 8000744:	4b23      	ldr	r3, [pc, #140]	; (80007d4 <MGPIO_voidSetPinDirection+0x1b4>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	79ba      	ldrb	r2, [r7, #6]
 800074a:	0092      	lsls	r2, r2, #2
 800074c:	210f      	movs	r1, #15
 800074e:	fa01 f202 	lsl.w	r2, r1, r2
 8000752:	43d2      	mvns	r2, r2
 8000754:	4611      	mov	r1, r2
 8000756:	4a1f      	ldr	r2, [pc, #124]	; (80007d4 <MGPIO_voidSetPinDirection+0x1b4>)
 8000758:	400b      	ands	r3, r1
 800075a:	6013      	str	r3, [r2, #0]
					GPIOC_CRL	|=((copy_u8Mode)	<< (copy_u8PIN * 4));
 800075c:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <MGPIO_voidSetPinDirection+0x1b4>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	7979      	ldrb	r1, [r7, #5]
 8000762:	79ba      	ldrb	r2, [r7, #6]
 8000764:	0092      	lsls	r2, r2, #2
 8000766:	fa01 f202 	lsl.w	r2, r1, r2
 800076a:	4611      	mov	r1, r2
 800076c:	4a19      	ldr	r2, [pc, #100]	; (80007d4 <MGPIO_voidSetPinDirection+0x1b4>)
 800076e:	430b      	orrs	r3, r1
 8000770:	6013      	str	r3, [r2, #0]
				}else{	/*	Return Error */	}		break;
 8000772:	e021      	b.n	80007b8 <MGPIO_voidSetPinDirection+0x198>
				}else if(copy_u8PIN <16)
 8000774:	79bb      	ldrb	r3, [r7, #6]
 8000776:	2b0f      	cmp	r3, #15
 8000778:	d81e      	bhi.n	80007b8 <MGPIO_voidSetPinDirection+0x198>
					copy_u8PIN -= 8;
 800077a:	79bb      	ldrb	r3, [r7, #6]
 800077c:	3b08      	subs	r3, #8
 800077e:	71bb      	strb	r3, [r7, #6]
					GPIOC_CRH	&=~((0b1111)			<< (copy_u8PIN * 4));
 8000780:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <MGPIO_voidSetPinDirection+0x1b8>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	79ba      	ldrb	r2, [r7, #6]
 8000786:	0092      	lsls	r2, r2, #2
 8000788:	210f      	movs	r1, #15
 800078a:	fa01 f202 	lsl.w	r2, r1, r2
 800078e:	43d2      	mvns	r2, r2
 8000790:	4611      	mov	r1, r2
 8000792:	4a11      	ldr	r2, [pc, #68]	; (80007d8 <MGPIO_voidSetPinDirection+0x1b8>)
 8000794:	400b      	ands	r3, r1
 8000796:	6013      	str	r3, [r2, #0]
					GPIOC_CRH	|=((copy_u8Mode)	<< (copy_u8PIN * 4));
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MGPIO_voidSetPinDirection+0x1b8>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	7979      	ldrb	r1, [r7, #5]
 800079e:	79ba      	ldrb	r2, [r7, #6]
 80007a0:	0092      	lsls	r2, r2, #2
 80007a2:	fa01 f202 	lsl.w	r2, r1, r2
 80007a6:	4611      	mov	r1, r2
 80007a8:	4a0b      	ldr	r2, [pc, #44]	; (80007d8 <MGPIO_voidSetPinDirection+0x1b8>)
 80007aa:	430b      	orrs	r3, r1
 80007ac:	6013      	str	r3, [r2, #0]
				}else{	/*	Return Error */	}		break;
 80007ae:	e003      	b.n	80007b8 <MGPIO_voidSetPinDirection+0x198>
				}else{	/*	Return Error */	}		break;
 80007b0:	bf00      	nop
 80007b2:	e002      	b.n	80007ba <MGPIO_voidSetPinDirection+0x19a>
				}else{	/*	Return Error */	}		break;
 80007b4:	bf00      	nop
 80007b6:	e000      	b.n	80007ba <MGPIO_voidSetPinDirection+0x19a>
				}else{	/*	Return Error */	}		break;
 80007b8:	bf00      	nop
	}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	40010800 	.word	0x40010800
 80007c8:	40010804 	.word	0x40010804
 80007cc:	40010c00 	.word	0x40010c00
 80007d0:	40010c04 	.word	0x40010c04
 80007d4:	40011000 	.word	0x40011000
 80007d8:	40011004 	.word	0x40011004

080007dc <MGPIO_voidSetPinValue>:

void MGPIO_voidSetPinValue(u8 copy_u8PORT , u8 copy_u8PIN , u8 copy_u8Value)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
 80007e6:	460b      	mov	r3, r1
 80007e8:	71bb      	strb	r3, [r7, #6]
 80007ea:	4613      	mov	r3, r2
 80007ec:	717b      	strb	r3, [r7, #5]
	switch(copy_u8PORT)
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b02      	cmp	r3, #2
 80007f2:	d040      	beq.n	8000876 <MGPIO_voidSetPinValue+0x9a>
 80007f4:	2b02      	cmp	r3, #2
 80007f6:	dc60      	bgt.n	80008ba <MGPIO_voidSetPinValue+0xde>
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d002      	beq.n	8000802 <MGPIO_voidSetPinValue+0x26>
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d01d      	beq.n	800083c <MGPIO_voidSetPinValue+0x60>




		}
	}
 8000800:	e05b      	b.n	80008ba <MGPIO_voidSetPinValue+0xde>
			        if(copy_u8Value == GPIO_HIGH)
 8000802:	797b      	ldrb	r3, [r7, #5]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d10a      	bne.n	800081e <MGPIO_voidSetPinValue+0x42>
			        	SET_BIT(   GPIOA_ODR   ,  copy_u8PIN );
 8000808:	4b2e      	ldr	r3, [pc, #184]	; (80008c4 <MGPIO_voidSetPinValue+0xe8>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	79ba      	ldrb	r2, [r7, #6]
 800080e:	2101      	movs	r1, #1
 8000810:	fa01 f202 	lsl.w	r2, r1, r2
 8000814:	4611      	mov	r1, r2
 8000816:	4a2b      	ldr	r2, [pc, #172]	; (80008c4 <MGPIO_voidSetPinValue+0xe8>)
 8000818:	430b      	orrs	r3, r1
 800081a:	6013      	str	r3, [r2, #0]
			        break ;
 800081c:	e048      	b.n	80008b0 <MGPIO_voidSetPinValue+0xd4>
			        else if(copy_u8Value == GPIO_LOW)
 800081e:	797b      	ldrb	r3, [r7, #5]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d145      	bne.n	80008b0 <MGPIO_voidSetPinValue+0xd4>
			        	CLR_BIT(  GPIOA_ODR  , copy_u8PIN );
 8000824:	4b27      	ldr	r3, [pc, #156]	; (80008c4 <MGPIO_voidSetPinValue+0xe8>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	79ba      	ldrb	r2, [r7, #6]
 800082a:	2101      	movs	r1, #1
 800082c:	fa01 f202 	lsl.w	r2, r1, r2
 8000830:	43d2      	mvns	r2, r2
 8000832:	4611      	mov	r1, r2
 8000834:	4a23      	ldr	r2, [pc, #140]	; (80008c4 <MGPIO_voidSetPinValue+0xe8>)
 8000836:	400b      	ands	r3, r1
 8000838:	6013      	str	r3, [r2, #0]
			        break ;
 800083a:	e039      	b.n	80008b0 <MGPIO_voidSetPinValue+0xd4>
		     if(copy_u8Value == GPIO_HIGH)
 800083c:	797b      	ldrb	r3, [r7, #5]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d10a      	bne.n	8000858 <MGPIO_voidSetPinValue+0x7c>
					        	SET_BIT(  GPIOB_ODR, copy_u8PIN );
 8000842:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <MGPIO_voidSetPinValue+0xec>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	79ba      	ldrb	r2, [r7, #6]
 8000848:	2101      	movs	r1, #1
 800084a:	fa01 f202 	lsl.w	r2, r1, r2
 800084e:	4611      	mov	r1, r2
 8000850:	4a1d      	ldr	r2, [pc, #116]	; (80008c8 <MGPIO_voidSetPinValue+0xec>)
 8000852:	430b      	orrs	r3, r1
 8000854:	6013      	str	r3, [r2, #0]
					        break ;
 8000856:	e02d      	b.n	80008b4 <MGPIO_voidSetPinValue+0xd8>
					        else if(copy_u8Value == GPIO_LOW)
 8000858:	797b      	ldrb	r3, [r7, #5]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d12a      	bne.n	80008b4 <MGPIO_voidSetPinValue+0xd8>
					        	CLR_BIT(  GPIOB_ODR, copy_u8PIN );
 800085e:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <MGPIO_voidSetPinValue+0xec>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	79ba      	ldrb	r2, [r7, #6]
 8000864:	2101      	movs	r1, #1
 8000866:	fa01 f202 	lsl.w	r2, r1, r2
 800086a:	43d2      	mvns	r2, r2
 800086c:	4611      	mov	r1, r2
 800086e:	4a16      	ldr	r2, [pc, #88]	; (80008c8 <MGPIO_voidSetPinValue+0xec>)
 8000870:	400b      	ands	r3, r1
 8000872:	6013      	str	r3, [r2, #0]
					        break ;
 8000874:	e01e      	b.n	80008b4 <MGPIO_voidSetPinValue+0xd8>
		     if(copy_u8Value == GPIO_HIGH)
 8000876:	797b      	ldrb	r3, [r7, #5]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d10a      	bne.n	8000892 <MGPIO_voidSetPinValue+0xb6>
					        	SET_BIT(  GPIOC_ODR, copy_u8PIN );
 800087c:	4b13      	ldr	r3, [pc, #76]	; (80008cc <MGPIO_voidSetPinValue+0xf0>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	79ba      	ldrb	r2, [r7, #6]
 8000882:	2101      	movs	r1, #1
 8000884:	fa01 f202 	lsl.w	r2, r1, r2
 8000888:	4611      	mov	r1, r2
 800088a:	4a10      	ldr	r2, [pc, #64]	; (80008cc <MGPIO_voidSetPinValue+0xf0>)
 800088c:	430b      	orrs	r3, r1
 800088e:	6013      	str	r3, [r2, #0]
					        break ;
 8000890:	e012      	b.n	80008b8 <MGPIO_voidSetPinValue+0xdc>
					        else if(copy_u8Value == GPIO_LOW)
 8000892:	797b      	ldrb	r3, [r7, #5]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d10f      	bne.n	80008b8 <MGPIO_voidSetPinValue+0xdc>
					        	CLR_BIT(  GPIOC_ODR, copy_u8PIN );
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <MGPIO_voidSetPinValue+0xf0>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	79ba      	ldrb	r2, [r7, #6]
 800089e:	2101      	movs	r1, #1
 80008a0:	fa01 f202 	lsl.w	r2, r1, r2
 80008a4:	43d2      	mvns	r2, r2
 80008a6:	4611      	mov	r1, r2
 80008a8:	4a08      	ldr	r2, [pc, #32]	; (80008cc <MGPIO_voidSetPinValue+0xf0>)
 80008aa:	400b      	ands	r3, r1
 80008ac:	6013      	str	r3, [r2, #0]
					        break ;
 80008ae:	e003      	b.n	80008b8 <MGPIO_voidSetPinValue+0xdc>
			        break ;
 80008b0:	bf00      	nop
 80008b2:	e002      	b.n	80008ba <MGPIO_voidSetPinValue+0xde>
					        break ;
 80008b4:	bf00      	nop
 80008b6:	e000      	b.n	80008ba <MGPIO_voidSetPinValue+0xde>
					        break ;
 80008b8:	bf00      	nop
	}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr
 80008c4:	4001080c 	.word	0x4001080c
 80008c8:	40010c0c 	.word	0x40010c0c
 80008cc:	4001100c 	.word	0x4001100c

080008d0 <EXTI0_IRQHandler>:
		EXTI1_CallBack  = 	ptr ;
	}
}

void	EXTI0_IRQHandler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	EXTI0_CallBack();		//AMANY();
 80008d4:	4b02      	ldr	r3, [pc, #8]	; (80008e0 <EXTI0_IRQHandler+0x10>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4798      	blx	r3
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	2000003c 	.word	0x2000003c

080008e4 <EXTI1_IRQHandler>:
void	EXTI1_IRQHandler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
	EXTI1_CallBack();		//AMANY();
 80008e8:	4b02      	ldr	r3, [pc, #8]	; (80008f4 <EXTI1_IRQHandler+0x10>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4798      	blx	r3
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000040 	.word	0x20000040

080008f8 <MNVIC_voidEnableInterrupt>:
	
	SCB_AIRCR = MNVIC_GROUB_SUB_DISTRIBUTION;
}

void MNVIC_voidEnableInterrupt(NVIC_Per_Position Copy_IntNumber)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
	if(Copy_IntNumber <= 31 )
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	2b1f      	cmp	r3, #31
 8000906:	d805      	bhi.n	8000914 <MNVIC_voidEnableInterrupt+0x1c>
	{
		NVIC_ISER0 = (1 << Copy_IntNumber);
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	2201      	movs	r2, #1
 800090c:	409a      	lsls	r2, r3
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MNVIC_voidEnableInterrupt+0x3c>)
 8000910:	601a      	str	r2, [r3, #0]
	{
		/* return error */
	}


}
 8000912:	e00a      	b.n	800092a <MNVIC_voidEnableInterrupt+0x32>
	else if(Copy_IntNumber <=59 )
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	2b3b      	cmp	r3, #59	; 0x3b
 8000918:	d807      	bhi.n	800092a <MNVIC_voidEnableInterrupt+0x32>
		Copy_IntNumber -=32;
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	3b20      	subs	r3, #32
 800091e:	71fb      	strb	r3, [r7, #7]
		NVIC_ISER1 = (1 << Copy_IntNumber);
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	2201      	movs	r2, #1
 8000924:	409a      	lsls	r2, r3
 8000926:	4b04      	ldr	r3, [pc, #16]	; (8000938 <MNVIC_voidEnableInterrupt+0x40>)
 8000928:	601a      	str	r2, [r3, #0]
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	e000e100 	.word	0xe000e100
 8000938:	e000e104 	.word	0xe000e104

0800093c <MRCC_voidInit>:
#include "../Inc/MCAL/RCC/RCC_interface.h"
#include "../Inc/MCAL/RCC/RCC_private.h"
#include "../Inc/MCAL/RCC/RCC_configuration.h"

void MRCC_voidInit(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
#if CLK_SOURCE == HSI
	// Turn on HSI
	MRCC_voidClkEnable(HSI);
 8000940:	2000      	movs	r0, #0
 8000942:	f000 f88f 	bl	8000a64 <MRCC_voidClkEnable>
	// Check HSI Ready
	while (MRCC_u8CheckClockReady(HSI) == NOT_READY);
 8000946:	bf00      	nop
 8000948:	2000      	movs	r0, #0
 800094a:	f000 f8e3 	bl	8000b14 <MRCC_u8CheckClockReady>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d0f9      	beq.n	8000948 <MRCC_voidInit+0xc>
	// Set Buses Prescaler
	MRCC_voidSetBusesPrescaler(AHB_PRESCALER, ABP1_PRESCALER, ABP2_PRESCALER);
 8000954:	2200      	movs	r2, #0
 8000956:	2100      	movs	r1, #0
 8000958:	2000      	movs	r0, #0
 800095a:	f000 f94b 	bl	8000bf4 <MRCC_voidSetBusesPrescaler>
	// Switch to HSI Clock
	MRCC_voidSetClkSource(HSI);
 800095e:	2000      	movs	r0, #0
 8000960:	f000 f90a 	bl	8000b78 <MRCC_voidSetClkSource>
	// Turn off HSE and PLL
	MRCC_voidClkDisable(HSE);
 8000964:	2001      	movs	r0, #1
 8000966:	f000 f8a9 	bl	8000abc <MRCC_voidClkDisable>
	MRCC_voidClkDisable(PLL);
 800096a:	2002      	movs	r0, #2
 800096c:	f000 f8a6 	bl	8000abc <MRCC_voidClkDisable>

#else
#error CLOCK Source isn not configured in the right way
#endif

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}

08000974 <MRCC_voidPerClock_State>:

void MRCC_voidPerClock_State(Buses_t A_bus ,u8  A_peripheral ,PClock_State_t A_state )
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]
 800097e:	460b      	mov	r3, r1
 8000980:	71bb      	strb	r3, [r7, #6]
 8000982:	4613      	mov	r3, r2
 8000984:	717b      	strb	r3, [r7, #5]
	  switch (A_bus) {
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	2b02      	cmp	r3, #2
 800098a:	d040      	beq.n	8000a0e <MRCC_voidPerClock_State+0x9a>
 800098c:	2b02      	cmp	r3, #2
 800098e:	dc5b      	bgt.n	8000a48 <MRCC_voidPerClock_State+0xd4>
 8000990:	2b00      	cmp	r3, #0
 8000992:	d002      	beq.n	800099a <MRCC_voidPerClock_State+0x26>
 8000994:	2b01      	cmp	r3, #1
 8000996:	d01d      	beq.n	80009d4 <MRCC_voidPerClock_State+0x60>
	        	{
	        		CLR_BIT (RCC->APB2ENR  , A_peripheral );
	        	}
	        	break;

	        default       : break;
 8000998:	e056      	b.n	8000a48 <MRCC_voidPerClock_State+0xd4>
	        	if(A_state == PClock_enable)
 800099a:	797b      	ldrb	r3, [r7, #5]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d10a      	bne.n	80009b6 <MRCC_voidPerClock_State+0x42>
	        		SET_BIT (RCC->AHBENR  , A_peripheral );
 80009a0:	4b2f      	ldr	r3, [pc, #188]	; (8000a60 <MRCC_voidPerClock_State+0xec>)
 80009a2:	695b      	ldr	r3, [r3, #20]
 80009a4:	79ba      	ldrb	r2, [r7, #6]
 80009a6:	2101      	movs	r1, #1
 80009a8:	fa01 f202 	lsl.w	r2, r1, r2
 80009ac:	4611      	mov	r1, r2
 80009ae:	4a2c      	ldr	r2, [pc, #176]	; (8000a60 <MRCC_voidPerClock_State+0xec>)
 80009b0:	430b      	orrs	r3, r1
 80009b2:	6153      	str	r3, [r2, #20]
	        	break;
 80009b4:	e04a      	b.n	8000a4c <MRCC_voidPerClock_State+0xd8>
	        	else if(A_state == PClock_disable)
 80009b6:	797b      	ldrb	r3, [r7, #5]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d147      	bne.n	8000a4c <MRCC_voidPerClock_State+0xd8>
		        	CLR_BIT (RCC->AHBENR  , A_peripheral );
 80009bc:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <MRCC_voidPerClock_State+0xec>)
 80009be:	695b      	ldr	r3, [r3, #20]
 80009c0:	79ba      	ldrb	r2, [r7, #6]
 80009c2:	2101      	movs	r1, #1
 80009c4:	fa01 f202 	lsl.w	r2, r1, r2
 80009c8:	43d2      	mvns	r2, r2
 80009ca:	4611      	mov	r1, r2
 80009cc:	4a24      	ldr	r2, [pc, #144]	; (8000a60 <MRCC_voidPerClock_State+0xec>)
 80009ce:	400b      	ands	r3, r1
 80009d0:	6153      	str	r3, [r2, #20]
	        	break;
 80009d2:	e03b      	b.n	8000a4c <MRCC_voidPerClock_State+0xd8>
	        	if(A_state == PClock_enable)
 80009d4:	797b      	ldrb	r3, [r7, #5]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d10a      	bne.n	80009f0 <MRCC_voidPerClock_State+0x7c>
	        		SET_BIT (RCC->APB1ENR  , A_peripheral );
 80009da:	4b21      	ldr	r3, [pc, #132]	; (8000a60 <MRCC_voidPerClock_State+0xec>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	79ba      	ldrb	r2, [r7, #6]
 80009e0:	2101      	movs	r1, #1
 80009e2:	fa01 f202 	lsl.w	r2, r1, r2
 80009e6:	4611      	mov	r1, r2
 80009e8:	4a1d      	ldr	r2, [pc, #116]	; (8000a60 <MRCC_voidPerClock_State+0xec>)
 80009ea:	430b      	orrs	r3, r1
 80009ec:	61d3      	str	r3, [r2, #28]
	        	break;
 80009ee:	e02f      	b.n	8000a50 <MRCC_voidPerClock_State+0xdc>
	        	else if(A_state == PClock_disable)
 80009f0:	797b      	ldrb	r3, [r7, #5]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d12c      	bne.n	8000a50 <MRCC_voidPerClock_State+0xdc>
	        		CLR_BIT (RCC->APB1ENR  , A_peripheral );
 80009f6:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <MRCC_voidPerClock_State+0xec>)
 80009f8:	69db      	ldr	r3, [r3, #28]
 80009fa:	79ba      	ldrb	r2, [r7, #6]
 80009fc:	2101      	movs	r1, #1
 80009fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000a02:	43d2      	mvns	r2, r2
 8000a04:	4611      	mov	r1, r2
 8000a06:	4a16      	ldr	r2, [pc, #88]	; (8000a60 <MRCC_voidPerClock_State+0xec>)
 8000a08:	400b      	ands	r3, r1
 8000a0a:	61d3      	str	r3, [r2, #28]
	        	break;
 8000a0c:	e020      	b.n	8000a50 <MRCC_voidPerClock_State+0xdc>
	        	if(A_state == PClock_enable)
 8000a0e:	797b      	ldrb	r3, [r7, #5]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d10a      	bne.n	8000a2a <MRCC_voidPerClock_State+0xb6>
	        		SET_BIT (RCC->APB2ENR  , A_peripheral );
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <MRCC_voidPerClock_State+0xec>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	79ba      	ldrb	r2, [r7, #6]
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a20:	4611      	mov	r1, r2
 8000a22:	4a0f      	ldr	r2, [pc, #60]	; (8000a60 <MRCC_voidPerClock_State+0xec>)
 8000a24:	430b      	orrs	r3, r1
 8000a26:	6193      	str	r3, [r2, #24]
	        	break;
 8000a28:	e014      	b.n	8000a54 <MRCC_voidPerClock_State+0xe0>
	        	else if(A_state == PClock_disable)
 8000a2a:	797b      	ldrb	r3, [r7, #5]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d111      	bne.n	8000a54 <MRCC_voidPerClock_State+0xe0>
	        		CLR_BIT (RCC->APB2ENR  , A_peripheral );
 8000a30:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <MRCC_voidPerClock_State+0xec>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	79ba      	ldrb	r2, [r7, #6]
 8000a36:	2101      	movs	r1, #1
 8000a38:	fa01 f202 	lsl.w	r2, r1, r2
 8000a3c:	43d2      	mvns	r2, r2
 8000a3e:	4611      	mov	r1, r2
 8000a40:	4a07      	ldr	r2, [pc, #28]	; (8000a60 <MRCC_voidPerClock_State+0xec>)
 8000a42:	400b      	ands	r3, r1
 8000a44:	6193      	str	r3, [r2, #24]
	        	break;
 8000a46:	e005      	b.n	8000a54 <MRCC_voidPerClock_State+0xe0>
	        default       : break;
 8000a48:	bf00      	nop
 8000a4a:	e004      	b.n	8000a56 <MRCC_voidPerClock_State+0xe2>
	        	break;
 8000a4c:	bf00      	nop
 8000a4e:	e002      	b.n	8000a56 <MRCC_voidPerClock_State+0xe2>
	        	break;
 8000a50:	bf00      	nop
 8000a52:	e000      	b.n	8000a56 <MRCC_voidPerClock_State+0xe2>
	        	break;
 8000a54:	bf00      	nop
	      }
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr
 8000a60:	40021000 	.word	0x40021000

08000a64 <MRCC_voidClkEnable>:
		break;
	}
}

void MRCC_voidClkEnable(u8 A_u8ClkSource)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
	switch (A_u8ClkSource)
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	2b02      	cmp	r3, #2
 8000a72:	d014      	beq.n	8000a9e <MRCC_voidClkEnable+0x3a>
 8000a74:	2b02      	cmp	r3, #2
 8000a76:	dc19      	bgt.n	8000aac <MRCC_voidClkEnable+0x48>
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d002      	beq.n	8000a82 <MRCC_voidClkEnable+0x1e>
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d007      	beq.n	8000a90 <MRCC_voidClkEnable+0x2c>
		break;
	case PLL:
		SET_BIT(RCC->CR, PLL_ON_BIT);
		break;
	}
}
 8000a80:	e014      	b.n	8000aac <MRCC_voidClkEnable+0x48>
		SET_BIT(RCC->CR, HSI_ON_BIT);
 8000a82:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <MRCC_voidClkEnable+0x54>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a0c      	ldr	r2, [pc, #48]	; (8000ab8 <MRCC_voidClkEnable+0x54>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6013      	str	r3, [r2, #0]
		break;
 8000a8e:	e00d      	b.n	8000aac <MRCC_voidClkEnable+0x48>
		SET_BIT(RCC->CR, HSE_ON_BIT);
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MRCC_voidClkEnable+0x54>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <MRCC_voidClkEnable+0x54>)
 8000a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a9a:	6013      	str	r3, [r2, #0]
		break;
 8000a9c:	e006      	b.n	8000aac <MRCC_voidClkEnable+0x48>
		SET_BIT(RCC->CR, PLL_ON_BIT);
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MRCC_voidClkEnable+0x54>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <MRCC_voidClkEnable+0x54>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	6013      	str	r3, [r2, #0]
		break;
 8000aaa:	bf00      	nop
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40021000 	.word	0x40021000

08000abc <MRCC_voidClkDisable>:

void MRCC_voidClkDisable(u8 A_u8ClkSource)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
	switch (A_u8ClkSource)
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d014      	beq.n	8000af6 <MRCC_voidClkDisable+0x3a>
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	dc19      	bgt.n	8000b04 <MRCC_voidClkDisable+0x48>
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d002      	beq.n	8000ada <MRCC_voidClkDisable+0x1e>
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d007      	beq.n	8000ae8 <MRCC_voidClkDisable+0x2c>
		break;
	case PLL:
		CLR_BIT(RCC->CR, PLL_ON_BIT);
		break;
	}
}
 8000ad8:	e014      	b.n	8000b04 <MRCC_voidClkDisable+0x48>
		CLR_BIT(RCC->CR, HSI_ON_BIT);
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <MRCC_voidClkDisable+0x54>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a0c      	ldr	r2, [pc, #48]	; (8000b10 <MRCC_voidClkDisable+0x54>)
 8000ae0:	f023 0301 	bic.w	r3, r3, #1
 8000ae4:	6013      	str	r3, [r2, #0]
		break;
 8000ae6:	e00d      	b.n	8000b04 <MRCC_voidClkDisable+0x48>
		CLR_BIT(RCC->CR, HSE_ON_BIT);
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MRCC_voidClkDisable+0x54>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a08      	ldr	r2, [pc, #32]	; (8000b10 <MRCC_voidClkDisable+0x54>)
 8000aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000af2:	6013      	str	r3, [r2, #0]
		break;
 8000af4:	e006      	b.n	8000b04 <MRCC_voidClkDisable+0x48>
		CLR_BIT(RCC->CR, PLL_ON_BIT);
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MRCC_voidClkDisable+0x54>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a05      	ldr	r2, [pc, #20]	; (8000b10 <MRCC_voidClkDisable+0x54>)
 8000afc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000b00:	6013      	str	r3, [r2, #0]
		break;
 8000b02:	bf00      	nop
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	40021000 	.word	0x40021000

08000b14 <MRCC_u8CheckClockReady>:

u8 MRCC_u8CheckClockReady(u8 A_u8ClkSource)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
	u8 local_u8ReadyFlag = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	73fb      	strb	r3, [r7, #15]
	switch (A_u8ClkSource)
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	2b02      	cmp	r3, #2
 8000b26:	d016      	beq.n	8000b56 <MRCC_u8CheckClockReady+0x42>
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	dc1c      	bgt.n	8000b66 <MRCC_u8CheckClockReady+0x52>
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d002      	beq.n	8000b36 <MRCC_u8CheckClockReady+0x22>
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d008      	beq.n	8000b46 <MRCC_u8CheckClockReady+0x32>
 8000b34:	e017      	b.n	8000b66 <MRCC_u8CheckClockReady+0x52>
	{
	case HSI:
		local_u8ReadyFlag = GET_BIT(RCC->CR, HSI_RDY_BIT);
 8000b36:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <MRCC_u8CheckClockReady+0x60>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	085b      	lsrs	r3, r3, #1
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	73fb      	strb	r3, [r7, #15]
		break;
 8000b44:	e00f      	b.n	8000b66 <MRCC_u8CheckClockReady+0x52>
	case HSE:
		local_u8ReadyFlag = GET_BIT(RCC->CR, HSE_RDY_BIT);
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <MRCC_u8CheckClockReady+0x60>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	0c5b      	lsrs	r3, r3, #17
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	73fb      	strb	r3, [r7, #15]
		break;
 8000b54:	e007      	b.n	8000b66 <MRCC_u8CheckClockReady+0x52>
	case PLL:
		local_u8ReadyFlag = GET_BIT(RCC->CR, PLL_RDY_BIT);
 8000b56:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <MRCC_u8CheckClockReady+0x60>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	0e5b      	lsrs	r3, r3, #25
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	73fb      	strb	r3, [r7, #15]
		break;
 8000b64:	bf00      	nop
	}
	return local_u8ReadyFlag;
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	40021000 	.word	0x40021000

08000b78 <MRCC_voidSetClkSource>:

void MRCC_voidSetClkSource(u8 A_u8ClkSource)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
	switch (A_u8ClkSource)
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d020      	beq.n	8000bca <MRCC_voidSetClkSource+0x52>
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	dc2b      	bgt.n	8000be4 <MRCC_voidSetClkSource+0x6c>
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d002      	beq.n	8000b96 <MRCC_voidSetClkSource+0x1e>
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d00d      	beq.n	8000bb0 <MRCC_voidSetClkSource+0x38>
	case PLL:
		CLR_BIT(RCC->CFGR, SYSTEM_CLOCK_BIT0);
		SET_BIT(RCC->CFGR, SYSTEM_CLOCK_BIT1);
		break;
	}
}
 8000b94:	e026      	b.n	8000be4 <MRCC_voidSetClkSource+0x6c>
		CLR_BIT(RCC->CFGR, SYSTEM_CLOCK_BIT0);
 8000b96:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <MRCC_voidSetClkSource+0x78>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	4a15      	ldr	r2, [pc, #84]	; (8000bf0 <MRCC_voidSetClkSource+0x78>)
 8000b9c:	f023 0301 	bic.w	r3, r3, #1
 8000ba0:	6053      	str	r3, [r2, #4]
		CLR_BIT(RCC->CFGR, SYSTEM_CLOCK_BIT1);
 8000ba2:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <MRCC_voidSetClkSource+0x78>)
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <MRCC_voidSetClkSource+0x78>)
 8000ba8:	f023 0302 	bic.w	r3, r3, #2
 8000bac:	6053      	str	r3, [r2, #4]
		break;
 8000bae:	e019      	b.n	8000be4 <MRCC_voidSetClkSource+0x6c>
		SET_BIT(RCC->CFGR, SYSTEM_CLOCK_BIT0);
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <MRCC_voidSetClkSource+0x78>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	4a0e      	ldr	r2, [pc, #56]	; (8000bf0 <MRCC_voidSetClkSource+0x78>)
 8000bb6:	f043 0301 	orr.w	r3, r3, #1
 8000bba:	6053      	str	r3, [r2, #4]
		CLR_BIT(RCC->CFGR, SYSTEM_CLOCK_BIT1);
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MRCC_voidSetClkSource+0x78>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	4a0b      	ldr	r2, [pc, #44]	; (8000bf0 <MRCC_voidSetClkSource+0x78>)
 8000bc2:	f023 0302 	bic.w	r3, r3, #2
 8000bc6:	6053      	str	r3, [r2, #4]
		break;
 8000bc8:	e00c      	b.n	8000be4 <MRCC_voidSetClkSource+0x6c>
		CLR_BIT(RCC->CFGR, SYSTEM_CLOCK_BIT0);
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MRCC_voidSetClkSource+0x78>)
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	4a08      	ldr	r2, [pc, #32]	; (8000bf0 <MRCC_voidSetClkSource+0x78>)
 8000bd0:	f023 0301 	bic.w	r3, r3, #1
 8000bd4:	6053      	str	r3, [r2, #4]
		SET_BIT(RCC->CFGR, SYSTEM_CLOCK_BIT1);
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MRCC_voidSetClkSource+0x78>)
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <MRCC_voidSetClkSource+0x78>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	6053      	str	r3, [r2, #4]
		break;
 8000be2:	bf00      	nop
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <MRCC_voidSetBusesPrescaler>:

void MRCC_voidSetBusesPrescaler(u8 A_u8AHBPrescaler, u8 A_u8APB1Prescaler, u8 A_u8APB2Prescaler)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	71bb      	strb	r3, [r7, #6]
 8000c02:	4613      	mov	r3, r2
 8000c04:	717b      	strb	r3, [r7, #5]
	RCC->CFGR &= ~(BUSES_PRESCALER_RESET_MASK << AHB_PRESCALER_FBIT);
 8000c06:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <MRCC_voidSetBusesPrescaler+0x5c>)
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	4a11      	ldr	r2, [pc, #68]	; (8000c50 <MRCC_voidSetBusesPrescaler+0x5c>)
 8000c0c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000c10:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000c14:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (A_u8AHBPrescaler << AHB_PRESCALER_FBIT);
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <MRCC_voidSetBusesPrescaler+0x5c>)
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	79fa      	ldrb	r2, [r7, #7]
 8000c1c:	0112      	lsls	r2, r2, #4
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4a0b      	ldr	r2, [pc, #44]	; (8000c50 <MRCC_voidSetBusesPrescaler+0x5c>)
 8000c22:	430b      	orrs	r3, r1
 8000c24:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (A_u8APB1Prescaler << APB1_PRESCALER_FBIT);
 8000c26:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <MRCC_voidSetBusesPrescaler+0x5c>)
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	79ba      	ldrb	r2, [r7, #6]
 8000c2c:	0212      	lsls	r2, r2, #8
 8000c2e:	4611      	mov	r1, r2
 8000c30:	4a07      	ldr	r2, [pc, #28]	; (8000c50 <MRCC_voidSetBusesPrescaler+0x5c>)
 8000c32:	430b      	orrs	r3, r1
 8000c34:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (A_u8APB2Prescaler << APB2_PRESCALER_FBIT);
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <MRCC_voidSetBusesPrescaler+0x5c>)
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	797a      	ldrb	r2, [r7, #5]
 8000c3c:	02d2      	lsls	r2, r2, #11
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4a03      	ldr	r2, [pc, #12]	; (8000c50 <MRCC_voidSetBusesPrescaler+0x5c>)
 8000c42:	430b      	orrs	r3, r1
 8000c44:	6053      	str	r3, [r2, #4]
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	40021000 	.word	0x40021000

08000c54 <SPI1_IRQHandler>:
	/* Send data */
	(*(SPI[copy_channel] + DR )) = copy_u16SendData ;
}

/***************** ISR handlers ******************/
void SPI1_IRQHandler (void){
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
	/* clear falg */
	CLR_BIT ((*(SPI[0] + SR )) , RXNE );
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <SPI1_IRQHandler+0x38>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	3308      	adds	r3, #8
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <SPI1_IRQHandler+0x38>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	3308      	adds	r3, #8
 8000c68:	f022 0201 	bic.w	r2, r2, #1
 8000c6c:	601a      	str	r2, [r3, #0]
	/* Receive data */
	u16 local_u16RecData = (*(SPI[0] + DR )) ;
 8000c6e:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <SPI1_IRQHandler+0x38>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	330c      	adds	r3, #12
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	80fb      	strh	r3, [r7, #6]
	/* call function*/
	callBackFunc[0](local_u16RecData);
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <SPI1_IRQHandler+0x3c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	88fa      	ldrh	r2, [r7, #6]
 8000c7e:	4610      	mov	r0, r2
 8000c80:	4798      	blx	r3
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000000 	.word	0x20000000
 8000c90:	2000004c 	.word	0x2000004c

08000c94 <SPI2_IRQHandler>:

void SPI2_IRQHandler (void){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
	/* clear falg */
	CLR_BIT ((*(SPI[1] + SR )) ,RXNE );
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <SPI2_IRQHandler+0x38>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	3308      	adds	r3, #8
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <SPI2_IRQHandler+0x38>)
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	3308      	adds	r3, #8
 8000ca8:	f022 0201 	bic.w	r2, r2, #1
 8000cac:	601a      	str	r2, [r3, #0]
	/* Receive data */
	u16 local_u16RecData = (*(SPI[0] + DR )) ;
 8000cae:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <SPI2_IRQHandler+0x38>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	330c      	adds	r3, #12
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	80fb      	strh	r3, [r7, #6]
	/* call function*/
	callBackFunc[1](local_u16RecData);
 8000cb8:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <SPI2_IRQHandler+0x3c>)
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	88fa      	ldrh	r2, [r7, #6]
 8000cbe:	4610      	mov	r0, r2
 8000cc0:	4798      	blx	r3
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	2000004c 	.word	0x2000004c

08000cd4 <MSTK_voidInit>:
#endif

static	void	(*SysTick_CallBack) (void) = NULL ;
static	u8		MSTK_u8ModeOfInterval ;
void	MSTK_voidInit				(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
	#if		MSTK_CLK_SRC	==	MSTK_SRC_AHB
		MSTK -> CTRL	=	0x00000004;
 8000cd8:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <MSTK_voidInit+0x14>)
 8000cda:	2204      	movs	r2, #4
 8000cdc:	601a      	str	r2, [r3, #0]
	#elif	MSTK_CLK_SRC	==	MSTK_SRC_AHB_8
		MSTK -> CTRL	=	0x00000000;	
	#else
		#error	"Wrong Choice of Clock Source Pre-Scaller"
	#endif
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000e010 	.word	0xe000e010

08000cec <SysTick_Handler>:
	
	return	Local_u32RemainingTime;
}

void SysTick_Handler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
	u8 Local_u8Temp;
	
	if(	MSTK_u8ModeOfInterval == MSTK_SINGLE_INTERVAL)
 8000cf2:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <SysTick_Handler+0x50>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d111      	bne.n	8000d1e <SysTick_Handler+0x32>
	{
		/*	Disable STK Interrupt 		*/
		CLR_BIT(MSTK -> CTRL , 1 );
 8000cfa:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <SysTick_Handler+0x54>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a10      	ldr	r2, [pc, #64]	; (8000d40 <SysTick_Handler+0x54>)
 8000d00:	f023 0302 	bic.w	r3, r3, #2
 8000d04:	6013      	str	r3, [r2, #0]
	
		/*	Stop timer					*/
		CLR_BIT(MSTK -> CTRL , 0 );
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <SysTick_Handler+0x54>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a0d      	ldr	r2, [pc, #52]	; (8000d40 <SysTick_Handler+0x54>)
 8000d0c:	f023 0301 	bic.w	r3, r3, #1
 8000d10:	6013      	str	r3, [r2, #0]
		MSTK -> LOAD	=	0;
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <SysTick_Handler+0x54>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	605a      	str	r2, [r3, #4]
		MSTK -> VAL		=	0;	
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <SysTick_Handler+0x54>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
	}
	/*	CallBack notification 			*/
	SysTick_CallBack();
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <SysTick_Handler+0x58>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4798      	blx	r3
	
	/*	Clear Interrupt Flag By reading	*/
	Local_u8Temp = GET_BIT(MSTK -> CTRL , 16);
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <SysTick_Handler+0x54>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	0c1b      	lsrs	r3, r3, #16
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	f003 0301 	and.w	r3, r3, #1
 8000d30:	71fb      	strb	r3, [r7, #7]
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000048 	.word	0x20000048
 8000d40:	e000e010 	.word	0xe000e010
 8000d44:	20000044 	.word	0x20000044

08000d48 <MUSART_voidInit>:
u8 GlobalUSART3_u8RecievedValue[USART3_BUFFER_SIZE];
s16 GlobalUSART3_s16RecievedFront=-1;
s16 GlobalUSART3_s16RecievedRear=-1;

void MUSART_voidInit(USART_T USART_NUM, u32 Copy_u32Buadrate)
{
 8000d48:	b590      	push	{r4, r7, lr}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	6039      	str	r1, [r7, #0]
 8000d52:	71fb      	strb	r3, [r7, #7]
	/*	Baudrate 	9600					*/
	USART[USART_NUM] -> BRR = MUSART_voidSetBaudrateRegister(Fclock, Copy_u32Buadrate) ;
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	4a3f      	ldr	r2, [pc, #252]	; (8000e54 <MUSART_voidInit+0x10c>)
 8000d58:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000d5c:	6839      	ldr	r1, [r7, #0]
 8000d5e:	483e      	ldr	r0, [pc, #248]	; (8000e58 <MUSART_voidInit+0x110>)
 8000d60:	f000 f87c 	bl	8000e5c <MUSART_voidSetBaudrateRegister>
 8000d64:	4603      	mov	r3, r0
 8000d66:	60a3      	str	r3, [r4, #8]
	/*	UART EN , TX EN , RX EN 			*/
	SET_BIT((USART[USART_NUM] -> CR[0]),RE);
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	4a3a      	ldr	r2, [pc, #232]	; (8000e54 <MUSART_voidInit+0x10c>)
 8000d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d70:	68da      	ldr	r2, [r3, #12]
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	4937      	ldr	r1, [pc, #220]	; (8000e54 <MUSART_voidInit+0x10c>)
 8000d76:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d7a:	f042 0204 	orr.w	r2, r2, #4
 8000d7e:	60da      	str	r2, [r3, #12]
	SET_BIT((USART[USART_NUM] -> CR[0]),TE);
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	4a34      	ldr	r2, [pc, #208]	; (8000e54 <MUSART_voidInit+0x10c>)
 8000d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d88:	68da      	ldr	r2, [r3, #12]
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	4931      	ldr	r1, [pc, #196]	; (8000e54 <MUSART_voidInit+0x10c>)
 8000d8e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d92:	f042 0208 	orr.w	r2, r2, #8
 8000d96:	60da      	str	r2, [r3, #12]
	SET_BIT((USART[USART_NUM] -> CR[0]),UE);
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	4a2e      	ldr	r2, [pc, #184]	; (8000e54 <MUSART_voidInit+0x10c>)
 8000d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da0:	68da      	ldr	r2, [r3, #12]
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	492b      	ldr	r1, [pc, #172]	; (8000e54 <MUSART_voidInit+0x10c>)
 8000da6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000daa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000dae:	60da      	str	r2, [r3, #12]
	USART[USART_NUM] -> SR = 0;
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	4a28      	ldr	r2, [pc, #160]	; (8000e54 <MUSART_voidInit+0x10c>)
 8000db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
	MUSART_voidEnableUSART_RecieveInterrupt(USART_NUM);
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 fa66 	bl	8001290 <MUSART_voidEnableUSART_RecieveInterrupt>
	SET_BIT((USART[USART_NUM] -> CR[0]),RXNIE);
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	4a23      	ldr	r2, [pc, #140]	; (8000e54 <MUSART_voidInit+0x10c>)
 8000dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dcc:	68da      	ldr	r2, [r3, #12]
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	4920      	ldr	r1, [pc, #128]	; (8000e54 <MUSART_voidInit+0x10c>)
 8000dd2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000dd6:	f042 0220 	orr.w	r2, r2, #32
 8000dda:	60da      	str	r2, [r3, #12]
	if (USART_NUM == USART1)
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d10f      	bne.n	8000e02 <MUSART_voidInit+0xba>
	{
	MRCC_voidPerClock_State(APB2 ,USART1_PERIPHERAL ,PClock_enable );
 8000de2:	2201      	movs	r2, #1
 8000de4:	210e      	movs	r1, #14
 8000de6:	2002      	movs	r0, #2
 8000de8:	f7ff fdc4 	bl	8000974 <MRCC_voidPerClock_State>
	MGPIO_voidSetPinDirection(GPIOA , PIN9  , OUTPUT_SPEED_2MHZ_AFPP);
 8000dec:	220a      	movs	r2, #10
 8000dee:	2109      	movs	r1, #9
 8000df0:	2000      	movs	r0, #0
 8000df2:	f7ff fc15 	bl	8000620 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(GPIOA , PIN10  , INPUT_FLOATING);
 8000df6:	2204      	movs	r2, #4
 8000df8:	210a      	movs	r1, #10
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f7ff fc10 	bl	8000620 <MGPIO_voidSetPinDirection>
	MRCC_voidPerClock_State(APB1 ,USART3_PERIPHERAL ,PClock_enable );
	MGPIO_voidSetPinDirection(GPIOB , PIN10  , OUTPUT_SPEED_2MHZ_AFPP);
	MGPIO_voidSetPinDirection(GPIOB , PIN11  , INPUT_FLOATING);
	}

}
 8000e00:	e024      	b.n	8000e4c <MUSART_voidInit+0x104>
	else if( USART_NUM == USART2)
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d10f      	bne.n	8000e28 <MUSART_voidInit+0xe0>
    MRCC_voidPerClock_State(APB1 ,USART2_PERIPHERAL ,PClock_enable );
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2111      	movs	r1, #17
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	f7ff fdb1 	bl	8000974 <MRCC_voidPerClock_State>
	MGPIO_voidSetPinDirection(GPIOA , PIN2  , OUTPUT_SPEED_2MHZ_AFPP);
 8000e12:	220a      	movs	r2, #10
 8000e14:	2102      	movs	r1, #2
 8000e16:	2000      	movs	r0, #0
 8000e18:	f7ff fc02 	bl	8000620 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(GPIOA , PIN3  , INPUT_FLOATING);
 8000e1c:	2204      	movs	r2, #4
 8000e1e:	2103      	movs	r1, #3
 8000e20:	2000      	movs	r0, #0
 8000e22:	f7ff fbfd 	bl	8000620 <MGPIO_voidSetPinDirection>
}
 8000e26:	e011      	b.n	8000e4c <MUSART_voidInit+0x104>
	else if (USART_NUM == USART3)
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d10e      	bne.n	8000e4c <MUSART_voidInit+0x104>
	MRCC_voidPerClock_State(APB1 ,USART3_PERIPHERAL ,PClock_enable );
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2112      	movs	r1, #18
 8000e32:	2001      	movs	r0, #1
 8000e34:	f7ff fd9e 	bl	8000974 <MRCC_voidPerClock_State>
	MGPIO_voidSetPinDirection(GPIOB , PIN10  , OUTPUT_SPEED_2MHZ_AFPP);
 8000e38:	220a      	movs	r2, #10
 8000e3a:	210a      	movs	r1, #10
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f7ff fbef 	bl	8000620 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(GPIOB , PIN11  , INPUT_FLOATING);
 8000e42:	2204      	movs	r2, #4
 8000e44:	210b      	movs	r1, #11
 8000e46:	2001      	movs	r0, #1
 8000e48:	f7ff fbea 	bl	8000620 <MGPIO_voidSetPinDirection>
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd90      	pop	{r4, r7, pc}
 8000e54:	20000008 	.word	0x20000008
 8000e58:	007a1200 	.word	0x007a1200

08000e5c <MUSART_voidSetBaudrateRegister>:
u32 MUSART_voidSetBaudrateRegister(u32 Copy_u32FClock, u32 Copy_u32Baudrate)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b088      	sub	sp, #32
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
	u32 Local_u32DivFrac;
	u32 Local_u32BRRreturn;
	f32 Local_F32mentissaa;
	f32 Local_f32DivFrac;
	
	Local_u32mentissaa=Copy_u32FClock/(Copy_u32Baudrate*16);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	011b      	lsls	r3, r3, #4
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e70:	61fb      	str	r3, [r7, #28]
	Local_F32mentissaa=Copy_u32FClock/(Copy_u32Baudrate*16);
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	011b      	lsls	r3, r3, #4
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fae1 	bl	8000444 <__aeabi_ui2f>
 8000e82:	4603      	mov	r3, r0
 8000e84:	617b      	str	r3, [r7, #20]
	Local_u32DivFrac=(Local_u32mentissaa-Local_F32mentissaa)*16;
 8000e86:	69f8      	ldr	r0, [r7, #28]
 8000e88:	f7ff fadc 	bl	8000444 <__aeabi_ui2f>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	6979      	ldr	r1, [r7, #20]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fa25 	bl	80002e0 <__aeabi_fsub>
 8000e96:	4603      	mov	r3, r0
 8000e98:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff f967 	bl	8000170 <__aeabi_fmul>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fb9b 	bl	80005e0 <__aeabi_f2uiz>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	61bb      	str	r3, [r7, #24]
	Local_f32DivFrac=(Local_u32mentissaa-Local_F32mentissaa)*16;
 8000eae:	69f8      	ldr	r0, [r7, #28]
 8000eb0:	f7ff fac8 	bl	8000444 <__aeabi_ui2f>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	6979      	ldr	r1, [r7, #20]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fa11 	bl	80002e0 <__aeabi_fsub>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff f953 	bl	8000170 <__aeabi_fmul>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	613b      	str	r3, [r7, #16]
	if(Local_f32DivFrac>15.5)
 8000ece:	4915      	ldr	r1, [pc, #84]	; (8000f24 <MUSART_voidSetBaudrateRegister+0xc8>)
 8000ed0:	6938      	ldr	r0, [r7, #16]
 8000ed2:	f7ff fb7b 	bl	80005cc <__aeabi_fcmpgt>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d005      	beq.n	8000ee8 <MUSART_voidSetBaudrateRegister+0x8c>
	{
		Local_u32mentissaa++;
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	61fb      	str	r3, [r7, #28]
		Local_u32DivFrac=0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61bb      	str	r3, [r7, #24]
 8000ee6:	e013      	b.n	8000f10 <MUSART_voidSetBaudrateRegister+0xb4>
	}
	else
	{
		if((Local_f32DivFrac-Local_u32DivFrac)> 0.5 )
 8000ee8:	69b8      	ldr	r0, [r7, #24]
 8000eea:	f7ff faab 	bl	8000444 <__aeabi_ui2f>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	6938      	ldr	r0, [r7, #16]
 8000ef4:	f7ff f9f4 	bl	80002e0 <__aeabi_fsub>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fb64 	bl	80005cc <__aeabi_fcmpgt>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d002      	beq.n	8000f10 <MUSART_voidSetBaudrateRegister+0xb4>
		{
			Local_u32DivFrac++;
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	61bb      	str	r3, [r7, #24]
		}
		else
		{/*don't do anything*/}
	}
	Local_u32BRRreturn=(Local_u32mentissaa<<4) | (Local_u32DivFrac);
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	011b      	lsls	r3, r3, #4
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	60fb      	str	r3, [r7, #12]
	return Local_u32BRRreturn;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3720      	adds	r7, #32
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	41780000 	.word	0x41780000

08000f28 <MUSART_voidTransmitCharacter>:
void MUSART_voidTransmitCharacter(USART_T USART_NUM, u8 Copy_u8Character)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	460a      	mov	r2, r1
 8000f32:	71fb      	strb	r3, [r7, #7]
 8000f34:	4613      	mov	r3, r2
 8000f36:	71bb      	strb	r3, [r7, #6]
	u32 TimeOut = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
	while(GET_BIT(USART[USART_NUM]->SR,TXE) == 0 && TimeOut<10000000)
 8000f3c:	e002      	b.n	8000f44 <MUSART_voidTransmitCharacter+0x1c>
	{	
		TimeOut++;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	3301      	adds	r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
	while(GET_BIT(USART[USART_NUM]->SR,TXE) == 0 && TimeOut<10000000)
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <MUSART_voidTransmitCharacter+0x58>)
 8000f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	09db      	lsrs	r3, r3, #7
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d103      	bne.n	8000f60 <MUSART_voidTransmitCharacter+0x38>
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <MUSART_voidTransmitCharacter+0x5c>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d3ee      	bcc.n	8000f3e <MUSART_voidTransmitCharacter+0x16>
	}
	if(TimeOut<10000000)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4a08      	ldr	r2, [pc, #32]	; (8000f84 <MUSART_voidTransmitCharacter+0x5c>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d205      	bcs.n	8000f74 <MUSART_voidTransmitCharacter+0x4c>
	{
		USART[USART_NUM]->DR = Copy_u8Character;
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	4a05      	ldr	r2, [pc, #20]	; (8000f80 <MUSART_voidTransmitCharacter+0x58>)
 8000f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f70:	79ba      	ldrb	r2, [r7, #6]
 8000f72:	605a      	str	r2, [r3, #4]
	}
	else
	{
		
	}
}
 8000f74:	bf00      	nop
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000008 	.word	0x20000008
 8000f84:	00989680 	.word	0x00989680

08000f88 <MUSART_u8GetRecievedValue>:
		while((GET_BIT(USART[USART_NUM] -> SR , TC))== 0);
		i++;
	}
}
void MUSART_u8GetRecievedValue(USART_T USART_NUM, u8 *Ptr_u8RecievedChar)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	6039      	str	r1, [r7, #0]
 8000f92:	71fb      	strb	r3, [r7, #7]
	if(MUSART_u8IsRecieveBufferAvailable(USART_NUM)>0)
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 f8a6 	bl	80010e8 <MUSART_u8IsRecieveBufferAvailable>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f000 8089 	beq.w	80010b6 <MUSART_u8GetRecievedValue+0x12e>
	{
	if(USART_NUM == USART1)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d12a      	bne.n	8001000 <MUSART_u8GetRecievedValue+0x78>
	{
		GlobalUSART1_s16RecievedRear=(GlobalUSART1_s16RecievedRear+1)%USART1_BUFFER_SIZE;
 8000faa:	4b45      	ldr	r3, [pc, #276]	; (80010c0 <MUSART_u8GetRecievedValue+0x138>)
 8000fac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	4a44      	ldr	r2, [pc, #272]	; (80010c4 <MUSART_u8GetRecievedValue+0x13c>)
 8000fb4:	fb82 1203 	smull	r1, r2, r2, r3
 8000fb8:	1191      	asrs	r1, r2, #6
 8000fba:	17da      	asrs	r2, r3, #31
 8000fbc:	1a8a      	subs	r2, r1, r2
 8000fbe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fc2:	fb01 f202 	mul.w	r2, r1, r2
 8000fc6:	1a9a      	subs	r2, r3, r2
 8000fc8:	b212      	sxth	r2, r2
 8000fca:	4b3d      	ldr	r3, [pc, #244]	; (80010c0 <MUSART_u8GetRecievedValue+0x138>)
 8000fcc:	801a      	strh	r2, [r3, #0]
		*Ptr_u8RecievedChar = GlobalUSART1_u8RecievedValue[GlobalUSART1_s16RecievedRear];
 8000fce:	4b3c      	ldr	r3, [pc, #240]	; (80010c0 <MUSART_u8GetRecievedValue+0x138>)
 8000fd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b3c      	ldr	r3, [pc, #240]	; (80010c8 <MUSART_u8GetRecievedValue+0x140>)
 8000fd8:	5c9a      	ldrb	r2, [r3, r2]
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	701a      	strb	r2, [r3, #0]
		if(GlobalUSART1_s16RecievedFront == GlobalUSART1_s16RecievedRear)
 8000fde:	4b3b      	ldr	r3, [pc, #236]	; (80010cc <MUSART_u8GetRecievedValue+0x144>)
 8000fe0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000fe4:	4b36      	ldr	r3, [pc, #216]	; (80010c0 <MUSART_u8GetRecievedValue+0x138>)
 8000fe6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d163      	bne.n	80010b6 <MUSART_u8GetRecievedValue+0x12e>
		{
			GlobalUSART1_s16RecievedFront=-1;
 8000fee:	4b37      	ldr	r3, [pc, #220]	; (80010cc <MUSART_u8GetRecievedValue+0x144>)
 8000ff0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ff4:	801a      	strh	r2, [r3, #0]
			GlobalUSART1_s16RecievedRear=-1;
 8000ff6:	4b32      	ldr	r3, [pc, #200]	; (80010c0 <MUSART_u8GetRecievedValue+0x138>)
 8000ff8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ffc:	801a      	strh	r2, [r3, #0]
			GlobalUSART3_s16RecievedFront=-1;
			GlobalUSART3_s16RecievedRear=-1;
		}
	}
	}
}
 8000ffe:	e05a      	b.n	80010b6 <MUSART_u8GetRecievedValue+0x12e>
	else if(USART_NUM == USART2)
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d12a      	bne.n	800105c <MUSART_u8GetRecievedValue+0xd4>
		GlobalUSART2_s16RecievedRear=(GlobalUSART2_s16RecievedRear+1)%USART2_BUFFER_SIZE;
 8001006:	4b32      	ldr	r3, [pc, #200]	; (80010d0 <MUSART_u8GetRecievedValue+0x148>)
 8001008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100c:	3301      	adds	r3, #1
 800100e:	4a2d      	ldr	r2, [pc, #180]	; (80010c4 <MUSART_u8GetRecievedValue+0x13c>)
 8001010:	fb82 1203 	smull	r1, r2, r2, r3
 8001014:	1191      	asrs	r1, r2, #6
 8001016:	17da      	asrs	r2, r3, #31
 8001018:	1a8a      	subs	r2, r1, r2
 800101a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800101e:	fb01 f202 	mul.w	r2, r1, r2
 8001022:	1a9a      	subs	r2, r3, r2
 8001024:	b212      	sxth	r2, r2
 8001026:	4b2a      	ldr	r3, [pc, #168]	; (80010d0 <MUSART_u8GetRecievedValue+0x148>)
 8001028:	801a      	strh	r2, [r3, #0]
		*Ptr_u8RecievedChar = GlobalUSART2_u8RecievedValue[GlobalUSART2_s16RecievedRear];
 800102a:	4b29      	ldr	r3, [pc, #164]	; (80010d0 <MUSART_u8GetRecievedValue+0x148>)
 800102c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001030:	461a      	mov	r2, r3
 8001032:	4b28      	ldr	r3, [pc, #160]	; (80010d4 <MUSART_u8GetRecievedValue+0x14c>)
 8001034:	5c9a      	ldrb	r2, [r3, r2]
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	701a      	strb	r2, [r3, #0]
		if(GlobalUSART2_s16RecievedFront == GlobalUSART2_s16RecievedRear)
 800103a:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <MUSART_u8GetRecievedValue+0x150>)
 800103c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001040:	4b23      	ldr	r3, [pc, #140]	; (80010d0 <MUSART_u8GetRecievedValue+0x148>)
 8001042:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001046:	429a      	cmp	r2, r3
 8001048:	d135      	bne.n	80010b6 <MUSART_u8GetRecievedValue+0x12e>
			GlobalUSART2_s16RecievedFront=-1;
 800104a:	4b23      	ldr	r3, [pc, #140]	; (80010d8 <MUSART_u8GetRecievedValue+0x150>)
 800104c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001050:	801a      	strh	r2, [r3, #0]
			GlobalUSART2_s16RecievedRear=-1;
 8001052:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <MUSART_u8GetRecievedValue+0x148>)
 8001054:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001058:	801a      	strh	r2, [r3, #0]
}
 800105a:	e02c      	b.n	80010b6 <MUSART_u8GetRecievedValue+0x12e>
	else if(USART_NUM == USART3)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	2b02      	cmp	r3, #2
 8001060:	d129      	bne.n	80010b6 <MUSART_u8GetRecievedValue+0x12e>
		GlobalUSART3_s16RecievedRear=(GlobalUSART3_s16RecievedRear+1)%USART3_BUFFER_SIZE;
 8001062:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <MUSART_u8GetRecievedValue+0x154>)
 8001064:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001068:	3301      	adds	r3, #1
 800106a:	4a16      	ldr	r2, [pc, #88]	; (80010c4 <MUSART_u8GetRecievedValue+0x13c>)
 800106c:	fb82 1203 	smull	r1, r2, r2, r3
 8001070:	1191      	asrs	r1, r2, #6
 8001072:	17da      	asrs	r2, r3, #31
 8001074:	1a8a      	subs	r2, r1, r2
 8001076:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800107a:	fb01 f202 	mul.w	r2, r1, r2
 800107e:	1a9a      	subs	r2, r3, r2
 8001080:	b212      	sxth	r2, r2
 8001082:	4b16      	ldr	r3, [pc, #88]	; (80010dc <MUSART_u8GetRecievedValue+0x154>)
 8001084:	801a      	strh	r2, [r3, #0]
		*Ptr_u8RecievedChar = GlobalUSART3_u8RecievedValue[GlobalUSART3_s16RecievedRear];
 8001086:	4b15      	ldr	r3, [pc, #84]	; (80010dc <MUSART_u8GetRecievedValue+0x154>)
 8001088:	f9b3 3000 	ldrsh.w	r3, [r3]
 800108c:	461a      	mov	r2, r3
 800108e:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <MUSART_u8GetRecievedValue+0x158>)
 8001090:	5c9a      	ldrb	r2, [r3, r2]
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	701a      	strb	r2, [r3, #0]
		if(GlobalUSART3_s16RecievedFront == GlobalUSART3_s16RecievedRear)
 8001096:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <MUSART_u8GetRecievedValue+0x15c>)
 8001098:	f9b3 2000 	ldrsh.w	r2, [r3]
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <MUSART_u8GetRecievedValue+0x154>)
 800109e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d107      	bne.n	80010b6 <MUSART_u8GetRecievedValue+0x12e>
			GlobalUSART3_s16RecievedFront=-1;
 80010a6:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <MUSART_u8GetRecievedValue+0x15c>)
 80010a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010ac:	801a      	strh	r2, [r3, #0]
			GlobalUSART3_s16RecievedRear=-1;
 80010ae:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <MUSART_u8GetRecievedValue+0x154>)
 80010b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010b4:	801a      	strh	r2, [r3, #0]
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000016 	.word	0x20000016
 80010c4:	10624dd3 	.word	0x10624dd3
 80010c8:	20000824 	.word	0x20000824
 80010cc:	20000014 	.word	0x20000014
 80010d0:	2000001a 	.word	0x2000001a
 80010d4:	20000054 	.word	0x20000054
 80010d8:	20000018 	.word	0x20000018
 80010dc:	2000001e 	.word	0x2000001e
 80010e0:	2000043c 	.word	0x2000043c
 80010e4:	2000001c 	.word	0x2000001c

080010e8 <MUSART_u8IsRecieveBufferAvailable>:

u16 MUSART_u8IsRecieveBufferAvailable(USART_T USART_NUM)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
	u16 Buffer_count;
	if(USART_NUM == USART1)
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d13b      	bne.n	8001170 <MUSART_u8IsRecieveBufferAvailable+0x88>
	{
		if(GlobalUSART1_s16RecievedFront>GlobalUSART1_s16RecievedRear)
 80010f8:	4b5f      	ldr	r3, [pc, #380]	; (8001278 <MUSART_u8IsRecieveBufferAvailable+0x190>)
 80010fa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010fe:	4b5f      	ldr	r3, [pc, #380]	; (800127c <MUSART_u8IsRecieveBufferAvailable+0x194>)
 8001100:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001104:	429a      	cmp	r2, r3
 8001106:	dd0a      	ble.n	800111e <MUSART_u8IsRecieveBufferAvailable+0x36>
		{
			Buffer_count=GlobalUSART1_s16RecievedFront-GlobalUSART1_s16RecievedRear;
 8001108:	4b5b      	ldr	r3, [pc, #364]	; (8001278 <MUSART_u8IsRecieveBufferAvailable+0x190>)
 800110a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800110e:	b29a      	uxth	r2, r3
 8001110:	4b5a      	ldr	r3, [pc, #360]	; (800127c <MUSART_u8IsRecieveBufferAvailable+0x194>)
 8001112:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001116:	b29b      	uxth	r3, r3
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	81fb      	strh	r3, [r7, #14]
 800111c:	e0a5      	b.n	800126a <MUSART_u8IsRecieveBufferAvailable+0x182>
		}
		else if(GlobalUSART1_s16RecievedFront<GlobalUSART1_s16RecievedRear)
 800111e:	4b56      	ldr	r3, [pc, #344]	; (8001278 <MUSART_u8IsRecieveBufferAvailable+0x190>)
 8001120:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001124:	4b55      	ldr	r3, [pc, #340]	; (800127c <MUSART_u8IsRecieveBufferAvailable+0x194>)
 8001126:	f9b3 3000 	ldrsh.w	r3, [r3]
 800112a:	429a      	cmp	r2, r3
 800112c:	da0d      	bge.n	800114a <MUSART_u8IsRecieveBufferAvailable+0x62>
		{
			Buffer_count = (USART1_BUFFER_SIZE - GlobalUSART1_s16RecievedRear)+ GlobalUSART1_s16RecievedFront;
 800112e:	4b52      	ldr	r3, [pc, #328]	; (8001278 <MUSART_u8IsRecieveBufferAvailable+0x190>)
 8001130:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001134:	b29a      	uxth	r2, r3
 8001136:	4b51      	ldr	r3, [pc, #324]	; (800127c <MUSART_u8IsRecieveBufferAvailable+0x194>)
 8001138:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113c:	b29b      	uxth	r3, r3
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	b29b      	uxth	r3, r3
 8001142:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001146:	81fb      	strh	r3, [r7, #14]
 8001148:	e08f      	b.n	800126a <MUSART_u8IsRecieveBufferAvailable+0x182>
		}
		else if (GlobalUSART1_s16RecievedFront== -1 && GlobalUSART1_s16RecievedRear == -1)
 800114a:	4b4b      	ldr	r3, [pc, #300]	; (8001278 <MUSART_u8IsRecieveBufferAvailable+0x190>)
 800114c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001154:	d108      	bne.n	8001168 <MUSART_u8IsRecieveBufferAvailable+0x80>
 8001156:	4b49      	ldr	r3, [pc, #292]	; (800127c <MUSART_u8IsRecieveBufferAvailable+0x194>)
 8001158:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001160:	d102      	bne.n	8001168 <MUSART_u8IsRecieveBufferAvailable+0x80>
		{
			Buffer_count=0;
 8001162:	2300      	movs	r3, #0
 8001164:	81fb      	strh	r3, [r7, #14]
 8001166:	e080      	b.n	800126a <MUSART_u8IsRecieveBufferAvailable+0x182>
		}
		else 
		{
			Buffer_count = USART1_BUFFER_SIZE;
 8001168:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116c:	81fb      	strh	r3, [r7, #14]
 800116e:	e07c      	b.n	800126a <MUSART_u8IsRecieveBufferAvailable+0x182>
		}
	}
	else if(USART_NUM == USART2)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d13b      	bne.n	80011ee <MUSART_u8IsRecieveBufferAvailable+0x106>
	{
		if(GlobalUSART2_s16RecievedFront>GlobalUSART2_s16RecievedRear)
 8001176:	4b42      	ldr	r3, [pc, #264]	; (8001280 <MUSART_u8IsRecieveBufferAvailable+0x198>)
 8001178:	f9b3 2000 	ldrsh.w	r2, [r3]
 800117c:	4b41      	ldr	r3, [pc, #260]	; (8001284 <MUSART_u8IsRecieveBufferAvailable+0x19c>)
 800117e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001182:	429a      	cmp	r2, r3
 8001184:	dd0a      	ble.n	800119c <MUSART_u8IsRecieveBufferAvailable+0xb4>
		{
			Buffer_count=GlobalUSART2_s16RecievedFront-GlobalUSART2_s16RecievedRear;
 8001186:	4b3e      	ldr	r3, [pc, #248]	; (8001280 <MUSART_u8IsRecieveBufferAvailable+0x198>)
 8001188:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118c:	b29a      	uxth	r2, r3
 800118e:	4b3d      	ldr	r3, [pc, #244]	; (8001284 <MUSART_u8IsRecieveBufferAvailable+0x19c>)
 8001190:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001194:	b29b      	uxth	r3, r3
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	81fb      	strh	r3, [r7, #14]
 800119a:	e066      	b.n	800126a <MUSART_u8IsRecieveBufferAvailable+0x182>
		}
		else if(GlobalUSART2_s16RecievedFront<GlobalUSART2_s16RecievedRear)
 800119c:	4b38      	ldr	r3, [pc, #224]	; (8001280 <MUSART_u8IsRecieveBufferAvailable+0x198>)
 800119e:	f9b3 2000 	ldrsh.w	r2, [r3]
 80011a2:	4b38      	ldr	r3, [pc, #224]	; (8001284 <MUSART_u8IsRecieveBufferAvailable+0x19c>)
 80011a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	da0d      	bge.n	80011c8 <MUSART_u8IsRecieveBufferAvailable+0xe0>
		{
			Buffer_count = (USART2_BUFFER_SIZE - GlobalUSART2_s16RecievedRear)+ GlobalUSART2_s16RecievedFront;
 80011ac:	4b34      	ldr	r3, [pc, #208]	; (8001280 <MUSART_u8IsRecieveBufferAvailable+0x198>)
 80011ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	4b33      	ldr	r3, [pc, #204]	; (8001284 <MUSART_u8IsRecieveBufferAvailable+0x19c>)
 80011b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	b29b      	uxth	r3, r3
 80011c0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80011c4:	81fb      	strh	r3, [r7, #14]
 80011c6:	e050      	b.n	800126a <MUSART_u8IsRecieveBufferAvailable+0x182>
		}
		else if (GlobalUSART2_s16RecievedFront== -1 && GlobalUSART2_s16RecievedRear == -1)
 80011c8:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <MUSART_u8IsRecieveBufferAvailable+0x198>)
 80011ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d2:	d108      	bne.n	80011e6 <MUSART_u8IsRecieveBufferAvailable+0xfe>
 80011d4:	4b2b      	ldr	r3, [pc, #172]	; (8001284 <MUSART_u8IsRecieveBufferAvailable+0x19c>)
 80011d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011de:	d102      	bne.n	80011e6 <MUSART_u8IsRecieveBufferAvailable+0xfe>
		{
			Buffer_count=0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	81fb      	strh	r3, [r7, #14]
 80011e4:	e041      	b.n	800126a <MUSART_u8IsRecieveBufferAvailable+0x182>
		}
		else 
		{
			Buffer_count = USART2_BUFFER_SIZE;
 80011e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ea:	81fb      	strh	r3, [r7, #14]
 80011ec:	e03d      	b.n	800126a <MUSART_u8IsRecieveBufferAvailable+0x182>
		}
	}
	else if(USART_NUM == USART3)
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d13a      	bne.n	800126a <MUSART_u8IsRecieveBufferAvailable+0x182>
	{
		if(GlobalUSART3_s16RecievedFront>GlobalUSART3_s16RecievedRear)
 80011f4:	4b24      	ldr	r3, [pc, #144]	; (8001288 <MUSART_u8IsRecieveBufferAvailable+0x1a0>)
 80011f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80011fa:	4b24      	ldr	r3, [pc, #144]	; (800128c <MUSART_u8IsRecieveBufferAvailable+0x1a4>)
 80011fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001200:	429a      	cmp	r2, r3
 8001202:	dd0a      	ble.n	800121a <MUSART_u8IsRecieveBufferAvailable+0x132>
		{
			Buffer_count=GlobalUSART3_s16RecievedFront-GlobalUSART3_s16RecievedRear;
 8001204:	4b20      	ldr	r3, [pc, #128]	; (8001288 <MUSART_u8IsRecieveBufferAvailable+0x1a0>)
 8001206:	f9b3 3000 	ldrsh.w	r3, [r3]
 800120a:	b29a      	uxth	r2, r3
 800120c:	4b1f      	ldr	r3, [pc, #124]	; (800128c <MUSART_u8IsRecieveBufferAvailable+0x1a4>)
 800120e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001212:	b29b      	uxth	r3, r3
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	81fb      	strh	r3, [r7, #14]
 8001218:	e027      	b.n	800126a <MUSART_u8IsRecieveBufferAvailable+0x182>
		}
		else if(GlobalUSART3_s16RecievedFront<GlobalUSART3_s16RecievedRear)
 800121a:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <MUSART_u8IsRecieveBufferAvailable+0x1a0>)
 800121c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001220:	4b1a      	ldr	r3, [pc, #104]	; (800128c <MUSART_u8IsRecieveBufferAvailable+0x1a4>)
 8001222:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001226:	429a      	cmp	r2, r3
 8001228:	da0d      	bge.n	8001246 <MUSART_u8IsRecieveBufferAvailable+0x15e>
		{
			Buffer_count = (USART3_BUFFER_SIZE - GlobalUSART3_s16RecievedRear)+ GlobalUSART3_s16RecievedFront;
 800122a:	4b17      	ldr	r3, [pc, #92]	; (8001288 <MUSART_u8IsRecieveBufferAvailable+0x1a0>)
 800122c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001230:	b29a      	uxth	r2, r3
 8001232:	4b16      	ldr	r3, [pc, #88]	; (800128c <MUSART_u8IsRecieveBufferAvailable+0x1a4>)
 8001234:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001238:	b29b      	uxth	r3, r3
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	b29b      	uxth	r3, r3
 800123e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001242:	81fb      	strh	r3, [r7, #14]
 8001244:	e011      	b.n	800126a <MUSART_u8IsRecieveBufferAvailable+0x182>
		}
		else if (GlobalUSART3_s16RecievedFront== -1 && GlobalUSART3_s16RecievedRear == -1)
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <MUSART_u8IsRecieveBufferAvailable+0x1a0>)
 8001248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001250:	d108      	bne.n	8001264 <MUSART_u8IsRecieveBufferAvailable+0x17c>
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <MUSART_u8IsRecieveBufferAvailable+0x1a4>)
 8001254:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800125c:	d102      	bne.n	8001264 <MUSART_u8IsRecieveBufferAvailable+0x17c>
		{
			Buffer_count=0;
 800125e:	2300      	movs	r3, #0
 8001260:	81fb      	strh	r3, [r7, #14]
 8001262:	e002      	b.n	800126a <MUSART_u8IsRecieveBufferAvailable+0x182>
		}
		else 
		{
			Buffer_count = USART3_BUFFER_SIZE;
 8001264:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001268:	81fb      	strh	r3, [r7, #14]
		}
	}
	return Buffer_count;
 800126a:	89fb      	ldrh	r3, [r7, #14]
}
 800126c:	4618      	mov	r0, r3
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000014 	.word	0x20000014
 800127c:	20000016 	.word	0x20000016
 8001280:	20000018 	.word	0x20000018
 8001284:	2000001a 	.word	0x2000001a
 8001288:	2000001c 	.word	0x2000001c
 800128c:	2000001e 	.word	0x2000001e

08001290 <MUSART_voidEnableUSART_RecieveInterrupt>:
			while((GET_BIT(USART[USART_NUM] -> SR , 6))== 0);
			i--;
		}
}
void MUSART_voidEnableUSART_RecieveInterrupt(USART_T USART_NUM)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
	SET_BIT(USART[USART_NUM]->CR[0],RXNIE);
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	4a07      	ldr	r2, [pc, #28]	; (80012bc <MUSART_voidEnableUSART_RecieveInterrupt+0x2c>)
 800129e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a2:	68da      	ldr	r2, [r3, #12]
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	4905      	ldr	r1, [pc, #20]	; (80012bc <MUSART_voidEnableUSART_RecieveInterrupt+0x2c>)
 80012a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012ac:	f042 0220 	orr.w	r2, r2, #32
 80012b0:	60da      	str	r2, [r3, #12]
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	20000008 	.word	0x20000008

080012c0 <USART1_IRQHandler>:
{
	CLR_BIT(USART[USART_NUM]->CR[0],RXNIE);
}
void USART1_IRQHandler(void)

{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	if(GET_BIT(USART[0]->SR,RXNE) == 1)
 80012c4:	4b16      	ldr	r3, [pc, #88]	; (8001320 <USART1_IRQHandler+0x60>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	095b      	lsrs	r3, r3, #5
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d122      	bne.n	800131a <USART1_IRQHandler+0x5a>
	{
		if(MUSART_u8IsRecieveBufferAvailable(USART1) < USART1_BUFFER_SIZE)
 80012d4:	2000      	movs	r0, #0
 80012d6:	f7ff ff07 	bl	80010e8 <MUSART_u8IsRecieveBufferAvailable>
 80012da:	4603      	mov	r3, r0
 80012dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012e0:	d21b      	bcs.n	800131a <USART1_IRQHandler+0x5a>
		{
			GlobalUSART1_s16RecievedFront=(GlobalUSART1_s16RecievedFront+1)%USART1_BUFFER_SIZE;
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <USART1_IRQHandler+0x64>)
 80012e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e8:	3301      	adds	r3, #1
 80012ea:	4a0f      	ldr	r2, [pc, #60]	; (8001328 <USART1_IRQHandler+0x68>)
 80012ec:	fb82 1203 	smull	r1, r2, r2, r3
 80012f0:	1191      	asrs	r1, r2, #6
 80012f2:	17da      	asrs	r2, r3, #31
 80012f4:	1a8a      	subs	r2, r1, r2
 80012f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012fa:	fb01 f202 	mul.w	r2, r1, r2
 80012fe:	1a9a      	subs	r2, r3, r2
 8001300:	b212      	sxth	r2, r2
 8001302:	4b08      	ldr	r3, [pc, #32]	; (8001324 <USART1_IRQHandler+0x64>)
 8001304:	801a      	strh	r2, [r3, #0]
			GlobalUSART1_u8RecievedValue[GlobalUSART1_s16RecievedFront] = USART[0]->DR ;
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <USART1_IRQHandler+0x60>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	6859      	ldr	r1, [r3, #4]
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <USART1_IRQHandler+0x64>)
 800130e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001312:	461a      	mov	r2, r3
 8001314:	b2c9      	uxtb	r1, r1
 8001316:	4b05      	ldr	r3, [pc, #20]	; (800132c <USART1_IRQHandler+0x6c>)
 8001318:	5499      	strb	r1, [r3, r2]
		}
	}
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000008 	.word	0x20000008
 8001324:	20000014 	.word	0x20000014
 8001328:	10624dd3 	.word	0x10624dd3
 800132c:	20000824 	.word	0x20000824

08001330 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	if(GET_BIT(USART[1]->SR,RXNE) == 1)
 8001334:	4b16      	ldr	r3, [pc, #88]	; (8001390 <USART2_IRQHandler+0x60>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	095b      	lsrs	r3, r3, #5
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b01      	cmp	r3, #1
 8001342:	d122      	bne.n	800138a <USART2_IRQHandler+0x5a>
	{
		if(MUSART_u8IsRecieveBufferAvailable(USART2) <USART2_BUFFER_SIZE)
 8001344:	2001      	movs	r0, #1
 8001346:	f7ff fecf 	bl	80010e8 <MUSART_u8IsRecieveBufferAvailable>
 800134a:	4603      	mov	r3, r0
 800134c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001350:	d21b      	bcs.n	800138a <USART2_IRQHandler+0x5a>
		{
			GlobalUSART2_s16RecievedFront=(GlobalUSART2_s16RecievedFront+1)%USART2_BUFFER_SIZE;
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <USART2_IRQHandler+0x64>)
 8001354:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001358:	3301      	adds	r3, #1
 800135a:	4a0f      	ldr	r2, [pc, #60]	; (8001398 <USART2_IRQHandler+0x68>)
 800135c:	fb82 1203 	smull	r1, r2, r2, r3
 8001360:	1191      	asrs	r1, r2, #6
 8001362:	17da      	asrs	r2, r3, #31
 8001364:	1a8a      	subs	r2, r1, r2
 8001366:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800136a:	fb01 f202 	mul.w	r2, r1, r2
 800136e:	1a9a      	subs	r2, r3, r2
 8001370:	b212      	sxth	r2, r2
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <USART2_IRQHandler+0x64>)
 8001374:	801a      	strh	r2, [r3, #0]
			GlobalUSART2_u8RecievedValue[GlobalUSART2_s16RecievedFront] = USART[1]->DR ;
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <USART2_IRQHandler+0x60>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	6859      	ldr	r1, [r3, #4]
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <USART2_IRQHandler+0x64>)
 800137e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001382:	461a      	mov	r2, r3
 8001384:	b2c9      	uxtb	r1, r1
 8001386:	4b05      	ldr	r3, [pc, #20]	; (800139c <USART2_IRQHandler+0x6c>)
 8001388:	5499      	strb	r1, [r3, r2]
		}
	}
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000008 	.word	0x20000008
 8001394:	20000018 	.word	0x20000018
 8001398:	10624dd3 	.word	0x10624dd3
 800139c:	20000054 	.word	0x20000054

080013a0 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
	if(GET_BIT(USART[2]->SR,RXNE) == 1)
 80013a4:	4b16      	ldr	r3, [pc, #88]	; (8001400 <USART3_IRQHandler+0x60>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	095b      	lsrs	r3, r3, #5
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d122      	bne.n	80013fa <USART3_IRQHandler+0x5a>
	{
		if(MUSART_u8IsRecieveBufferAvailable(USART3) <USART3_BUFFER_SIZE)
 80013b4:	2002      	movs	r0, #2
 80013b6:	f7ff fe97 	bl	80010e8 <MUSART_u8IsRecieveBufferAvailable>
 80013ba:	4603      	mov	r3, r0
 80013bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013c0:	d21b      	bcs.n	80013fa <USART3_IRQHandler+0x5a>
		{
			GlobalUSART3_s16RecievedFront=(GlobalUSART3_s16RecievedFront+1)%USART3_BUFFER_SIZE;
 80013c2:	4b10      	ldr	r3, [pc, #64]	; (8001404 <USART3_IRQHandler+0x64>)
 80013c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c8:	3301      	adds	r3, #1
 80013ca:	4a0f      	ldr	r2, [pc, #60]	; (8001408 <USART3_IRQHandler+0x68>)
 80013cc:	fb82 1203 	smull	r1, r2, r2, r3
 80013d0:	1191      	asrs	r1, r2, #6
 80013d2:	17da      	asrs	r2, r3, #31
 80013d4:	1a8a      	subs	r2, r1, r2
 80013d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013da:	fb01 f202 	mul.w	r2, r1, r2
 80013de:	1a9a      	subs	r2, r3, r2
 80013e0:	b212      	sxth	r2, r2
 80013e2:	4b08      	ldr	r3, [pc, #32]	; (8001404 <USART3_IRQHandler+0x64>)
 80013e4:	801a      	strh	r2, [r3, #0]
			GlobalUSART3_u8RecievedValue[GlobalUSART3_s16RecievedFront] = USART[2]->DR ;
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <USART3_IRQHandler+0x60>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	6859      	ldr	r1, [r3, #4]
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <USART3_IRQHandler+0x64>)
 80013ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f2:	461a      	mov	r2, r3
 80013f4:	b2c9      	uxtb	r1, r1
 80013f6:	4b05      	ldr	r3, [pc, #20]	; (800140c <USART3_IRQHandler+0x6c>)
 80013f8:	5499      	strb	r1, [r3, r2]
		}
	}
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000008 	.word	0x20000008
 8001404:	2000001c 	.word	0x2000001c
 8001408:	10624dd3 	.word	0x10624dd3
 800140c:	2000043c 	.word	0x2000043c

08001410 <main>:
#include"../Inc/MCAL/NVIC/NVIC_interface.h"
#include "../Inc/MCAL/RCC/RCC_interface.h"
#include	"../Inc/MCAL/SYSTIC/STK_interface.h"

int main(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
	MRCC_voidInit();
 8001416:	f7ff fa91 	bl	800093c <MRCC_voidInit>
	MSTK_voidInit 				  ();
 800141a:	f7ff fc5b 	bl	8000cd4 <MSTK_voidInit>
	MRCC_voidPerClock_State(APB2 ,IOPA_PERIPHERAL ,PClock_enable );
 800141e:	2201      	movs	r2, #1
 8001420:	2102      	movs	r1, #2
 8001422:	2002      	movs	r0, #2
 8001424:	f7ff faa6 	bl	8000974 <MRCC_voidPerClock_State>
	MRCC_voidPerClock_State(APB2, IOPB_PERIPHERAL, PClock_enable);
 8001428:	2201      	movs	r2, #1
 800142a:	2103      	movs	r1, #3
 800142c:	2002      	movs	r0, #2
 800142e:	f7ff faa1 	bl	8000974 <MRCC_voidPerClock_State>

	MUSART_voidInit(USART2,9600);
 8001432:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8001436:	2001      	movs	r0, #1
 8001438:	f7ff fc86 	bl	8000d48 <MUSART_voidInit>
	MNVIC_voidEnableInterrupt(USART22);
 800143c:	2026      	movs	r0, #38	; 0x26
 800143e:	f7ff fa5b 	bl	80008f8 <MNVIC_voidEnableInterrupt>
	MUSART_voidInit(USART1,9600);
 8001442:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8001446:	2000      	movs	r0, #0
 8001448:	f7ff fc7e 	bl	8000d48 <MUSART_voidInit>
	MNVIC_voidEnableInterrupt(USART11);
 800144c:	2025      	movs	r0, #37	; 0x25
 800144e:	f7ff fa53 	bl	80008f8 <MNVIC_voidEnableInterrupt>
	MGPIO_voidSetPinDirection(GPIOA , PIN4  , OUTPUT_SPEED_2MHZ_PP);
 8001452:	2202      	movs	r2, #2
 8001454:	2104      	movs	r1, #4
 8001456:	2000      	movs	r0, #0
 8001458:	f7ff f8e2 	bl	8000620 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(GPIOA , PIN5  , OUTPUT_SPEED_2MHZ_PP);
 800145c:	2202      	movs	r2, #2
 800145e:	2105      	movs	r1, #5
 8001460:	2000      	movs	r0, #0
 8001462:	f7ff f8dd 	bl	8000620 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(GPIOA , PIN6  , OUTPUT_SPEED_2MHZ_PP);
 8001466:	2202      	movs	r2, #2
 8001468:	2106      	movs	r1, #6
 800146a:	2000      	movs	r0, #0
 800146c:	f7ff f8d8 	bl	8000620 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(GPIOA , PIN7  , OUTPUT_SPEED_2MHZ_PP);
 8001470:	2202      	movs	r2, #2
 8001472:	2107      	movs	r1, #7
 8001474:	2000      	movs	r0, #0
 8001476:	f7ff f8d3 	bl	8000620 <MGPIO_voidSetPinDirection>
	for(u32 i=0 ; i<190000 ;i++)
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
 800147e:	e003      	b.n	8001488 <main+0x78>
	{
		asm("NOP");
 8001480:	bf00      	nop
	for(u32 i=0 ; i<190000 ;i++)
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	3301      	adds	r3, #1
 8001486:	617b      	str	r3, [r7, #20]
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	4a32      	ldr	r2, [pc, #200]	; (8001554 <main+0x144>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d9f7      	bls.n	8001480 <main+0x70>
	}
	MUSART_voidTransmitCharacter(USART2, 'a');
 8001490:	2161      	movs	r1, #97	; 0x61
 8001492:	2001      	movs	r0, #1
 8001494:	f7ff fd48 	bl	8000f28 <MUSART_voidTransmitCharacter>
	for(u32 i=0 ; i<190000 ;i++)
 8001498:	2300      	movs	r3, #0
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	e003      	b.n	80014a6 <main+0x96>
	{
		asm("NOP");
 800149e:	bf00      	nop
	for(u32 i=0 ; i<190000 ;i++)
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	3301      	adds	r3, #1
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	4a2a      	ldr	r2, [pc, #168]	; (8001554 <main+0x144>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d9f7      	bls.n	800149e <main+0x8e>
	}
	MUSART_voidTransmitCharacter(USART2, 'b');
 80014ae:	2162      	movs	r1, #98	; 0x62
 80014b0:	2001      	movs	r0, #1
 80014b2:	f7ff fd39 	bl	8000f28 <MUSART_voidTransmitCharacter>
	for(u32 i=0 ; i<190000 ;i++)
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	e003      	b.n	80014c4 <main+0xb4>
	{
		asm("NOP");
 80014bc:	bf00      	nop
	for(u32 i=0 ; i<190000 ;i++)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	3301      	adds	r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4a23      	ldr	r2, [pc, #140]	; (8001554 <main+0x144>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d9f7      	bls.n	80014bc <main+0xac>
	}
	MUSART_voidTransmitCharacter(USART2, 'c');
 80014cc:	2163      	movs	r1, #99	; 0x63
 80014ce:	2001      	movs	r0, #1
 80014d0:	f7ff fd2a 	bl	8000f28 <MUSART_voidTransmitCharacter>
	for(u32 i=0 ; i<190000 ;i++)
 80014d4:	2300      	movs	r3, #0
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	e003      	b.n	80014e2 <main+0xd2>
	{
		asm("NOP");
 80014da:	bf00      	nop
	for(u32 i=0 ; i<190000 ;i++)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	3301      	adds	r3, #1
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	4a1b      	ldr	r2, [pc, #108]	; (8001554 <main+0x144>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d9f7      	bls.n	80014da <main+0xca>
	}
	MUSART_voidTransmitCharacter(USART2, 'd');
 80014ea:	2164      	movs	r1, #100	; 0x64
 80014ec:	2001      	movs	r0, #1
 80014ee:	f7ff fd1b 	bl	8000f28 <MUSART_voidTransmitCharacter>
	u8 data;
	while(1)
	{


		MUSART_u8GetRecievedValue(USART1, &data);
 80014f2:	1cfb      	adds	r3, r7, #3
 80014f4:	4619      	mov	r1, r3
 80014f6:	2000      	movs	r0, #0
 80014f8:	f7ff fd46 	bl	8000f88 <MUSART_u8GetRecievedValue>
		for(u32 i=0 ; i<790000 ;i++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	e003      	b.n	800150a <main+0xfa>
		{
			asm("NOP");
 8001502:	bf00      	nop
		for(u32 i=0 ; i<790000 ;i++)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3301      	adds	r3, #1
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a12      	ldr	r2, [pc, #72]	; (8001558 <main+0x148>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d9f7      	bls.n	8001502 <main+0xf2>
		}

		if(data == 'a')
 8001512:	78fb      	ldrb	r3, [r7, #3]
 8001514:	2b61      	cmp	r3, #97	; 0x61
 8001516:	d104      	bne.n	8001522 <main+0x112>
		{
			MGPIO_voidSetPinValue    (GPIOA , PIN4  , GPIO_HIGH);
 8001518:	2201      	movs	r2, #1
 800151a:	2104      	movs	r1, #4
 800151c:	2000      	movs	r0, #0
 800151e:	f7ff f95d 	bl	80007dc <MGPIO_voidSetPinValue>
		}
		if(data == 'b')
 8001522:	78fb      	ldrb	r3, [r7, #3]
 8001524:	2b62      	cmp	r3, #98	; 0x62
 8001526:	d104      	bne.n	8001532 <main+0x122>
		{
			MGPIO_voidSetPinValue    (GPIOA , PIN5  , GPIO_HIGH);
 8001528:	2201      	movs	r2, #1
 800152a:	2105      	movs	r1, #5
 800152c:	2000      	movs	r0, #0
 800152e:	f7ff f955 	bl	80007dc <MGPIO_voidSetPinValue>
		}
		if(data == 'c')
 8001532:	78fb      	ldrb	r3, [r7, #3]
 8001534:	2b63      	cmp	r3, #99	; 0x63
 8001536:	d104      	bne.n	8001542 <main+0x132>
		{
			MGPIO_voidSetPinValue    (GPIOA , PIN6  , GPIO_HIGH);
 8001538:	2201      	movs	r2, #1
 800153a:	2106      	movs	r1, #6
 800153c:	2000      	movs	r0, #0
 800153e:	f7ff f94d 	bl	80007dc <MGPIO_voidSetPinValue>
		}
		if(data == 'd')
 8001542:	78fb      	ldrb	r3, [r7, #3]
 8001544:	2b64      	cmp	r3, #100	; 0x64
 8001546:	d1d4      	bne.n	80014f2 <main+0xe2>
		{
			MGPIO_voidSetPinValue    (GPIOA , PIN7  , GPIO_HIGH);
 8001548:	2201      	movs	r2, #1
 800154a:	2107      	movs	r1, #7
 800154c:	2000      	movs	r0, #0
 800154e:	f7ff f945 	bl	80007dc <MGPIO_voidSetPinValue>
		MUSART_u8GetRecievedValue(USART1, &data);
 8001552:	e7ce      	b.n	80014f2 <main+0xe2>
 8001554:	0002e62f 	.word	0x0002e62f
 8001558:	000c0def 	.word	0x000c0def

0800155c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800155c:	480d      	ldr	r0, [pc, #52]	; (8001594 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800155e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001560:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001564:	480c      	ldr	r0, [pc, #48]	; (8001598 <LoopForever+0x6>)
  ldr r1, =_edata
 8001566:	490d      	ldr	r1, [pc, #52]	; (800159c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001568:	4a0d      	ldr	r2, [pc, #52]	; (80015a0 <LoopForever+0xe>)
  movs r3, #0
 800156a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800156c:	e002      	b.n	8001574 <LoopCopyDataInit>

0800156e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800156e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001572:	3304      	adds	r3, #4

08001574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001578:	d3f9      	bcc.n	800156e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800157c:	4c0a      	ldr	r4, [pc, #40]	; (80015a8 <LoopForever+0x16>)
  movs r3, #0
 800157e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001580:	e001      	b.n	8001586 <LoopFillZerobss>

08001582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001584:	3204      	adds	r2, #4

08001586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001588:	d3fb      	bcc.n	8001582 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800158a:	f000 f811 	bl	80015b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800158e:	f7ff ff3f 	bl	8001410 <main>

08001592 <LoopForever>:

LoopForever:
    b LoopForever
 8001592:	e7fe      	b.n	8001592 <LoopForever>
  ldr   r0, =_estack
 8001594:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800159c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80015a0:	08001618 	.word	0x08001618
  ldr r2, =_sbss
 80015a4:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80015a8:	20000c0c 	.word	0x20000c0c

080015ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015ac:	e7fe      	b.n	80015ac <ADC1_2_IRQHandler>
	...

080015b0 <__libc_init_array>:
 80015b0:	b570      	push	{r4, r5, r6, lr}
 80015b2:	2600      	movs	r6, #0
 80015b4:	4d0c      	ldr	r5, [pc, #48]	; (80015e8 <__libc_init_array+0x38>)
 80015b6:	4c0d      	ldr	r4, [pc, #52]	; (80015ec <__libc_init_array+0x3c>)
 80015b8:	1b64      	subs	r4, r4, r5
 80015ba:	10a4      	asrs	r4, r4, #2
 80015bc:	42a6      	cmp	r6, r4
 80015be:	d109      	bne.n	80015d4 <__libc_init_array+0x24>
 80015c0:	f000 f81a 	bl	80015f8 <_init>
 80015c4:	2600      	movs	r6, #0
 80015c6:	4d0a      	ldr	r5, [pc, #40]	; (80015f0 <__libc_init_array+0x40>)
 80015c8:	4c0a      	ldr	r4, [pc, #40]	; (80015f4 <__libc_init_array+0x44>)
 80015ca:	1b64      	subs	r4, r4, r5
 80015cc:	10a4      	asrs	r4, r4, #2
 80015ce:	42a6      	cmp	r6, r4
 80015d0:	d105      	bne.n	80015de <__libc_init_array+0x2e>
 80015d2:	bd70      	pop	{r4, r5, r6, pc}
 80015d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80015d8:	4798      	blx	r3
 80015da:	3601      	adds	r6, #1
 80015dc:	e7ee      	b.n	80015bc <__libc_init_array+0xc>
 80015de:	f855 3b04 	ldr.w	r3, [r5], #4
 80015e2:	4798      	blx	r3
 80015e4:	3601      	adds	r6, #1
 80015e6:	e7f2      	b.n	80015ce <__libc_init_array+0x1e>
 80015e8:	08001610 	.word	0x08001610
 80015ec:	08001610 	.word	0x08001610
 80015f0:	08001610 	.word	0x08001610
 80015f4:	08001614 	.word	0x08001614

080015f8 <_init>:
 80015f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015fa:	bf00      	nop
 80015fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015fe:	bc08      	pop	{r3}
 8001600:	469e      	mov	lr, r3
 8001602:	4770      	bx	lr

08001604 <_fini>:
 8001604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001606:	bf00      	nop
 8001608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800160a:	bc08      	pop	{r3}
 800160c:	469e      	mov	lr, r3
 800160e:	4770      	bx	lr
